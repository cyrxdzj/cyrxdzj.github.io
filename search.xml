<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>洛谷CF0008B题解</title>
      <link href="/2021-06-30-LuoguCF0008BTJ/"/>
      <url>/2021-06-30-LuoguCF0008BTJ/</url>
      
        <content type="html"><![CDATA[<h3 id="一、思路"><a href="#一、思路" class="headerlink" title="一、思路"></a>一、思路</h3><p><strong>需要注意，这里的机器人并不是在走没有东西的地图，它是在走有障碍的地图，所以它可能会被迫往回走。</strong></p><p>机器人可以往回走，有些是为了躲避障碍，有些就是吃饱了撑着。</p><p>如何判断一个机器人的往回走是否有效？</p><p>分两种情况。</p><ol><li><p>同一个格子，机器人走了 $2$ 次。</p><p>如图。</p><p><img src="https://z3.ax1x.com/2021/06/30/RBgx74.png" alt=""></p><p>显然，与其按照这个路线走，不如走 $1\Rightarrow2\Rightarrow6$ 的路线。</p></li><li><p>走到某一个格子，此时对于四周的格子，除了刚刚走过来的格子以外，其它三个格子已经有 $1$ 个走过了。</p><p>如图。</p><p><img src="https://z3.ax1x.com/2021/06/30/RB2i1x.png" alt=""></p><p>显然，与其按照这个路线走，不如走 $1\Rightarrow4$ 的路线。</p></li></ol><p>由此，我们可以模拟每一步走法，并进行判断。</p><h3 id="二、完整代码"><a href="#二、完整代码" class="headerlink" title="二、完整代码"></a>二、完整代码</h3><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;cstdio></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;cstring></span></span><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span><span class="token keyword">const</span> <span class="token keyword">int</span> MAXN<span class="token operator">=</span><span class="token number">205</span><span class="token punctuation">;</span><span class="token keyword">int</span> graph<span class="token punctuation">[</span>MAXN<span class="token punctuation">]</span><span class="token punctuation">[</span>MAXN<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token comment">//记录一个格子是否走过。</span><span class="token keyword">char</span> input<span class="token punctuation">[</span>MAXN<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">int</span> x<span class="token operator">=</span>MAXN<span class="token operator">/</span><span class="token number">2</span><span class="token punctuation">,</span>y<span class="token operator">=</span>MAXN<span class="token operator">/</span><span class="token number">2</span><span class="token punctuation">;</span><span class="token comment">//将初始x与y都赋值为地图中央。</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%s"</span><span class="token punctuation">,</span><span class="token operator">&amp;</span>input<span class="token punctuation">)</span><span class="token punctuation">;</span>graph<span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token punctuation">[</span>y<span class="token punctuation">]</span><span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span><span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span><span class="token function">strlen</span><span class="token punctuation">(</span>input<span class="token punctuation">)</span><span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">char</span> move<span class="token operator">=</span>input<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">if</span><span class="token punctuation">(</span>move<span class="token operator">==</span><span class="token string">'U'</span><span class="token punctuation">)</span><span class="token comment">//移动，修改坐标。</span><span class="token punctuation">&#123;</span>x<span class="token operator">--</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span>move<span class="token operator">==</span><span class="token string">'D'</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>x<span class="token operator">++</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span>move<span class="token operator">==</span><span class="token string">'L'</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>y<span class="token operator">--</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span>move<span class="token operator">==</span><span class="token string">'R'</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>y<span class="token operator">++</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">if</span><span class="token punctuation">(</span>graph<span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token punctuation">[</span>y<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token comment">//对应情况1。</span><span class="token punctuation">&#123;</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"BUG\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">if</span><span class="token punctuation">(</span>graph<span class="token punctuation">[</span>x<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>y<span class="token punctuation">]</span><span class="token operator">+</span>graph<span class="token punctuation">[</span>x<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>y<span class="token punctuation">]</span><span class="token operator">+</span>graph<span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token punctuation">[</span>y<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">+</span>graph<span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token punctuation">[</span>y<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">></span><span class="token number">1</span><span class="token punctuation">)</span><span class="token comment">//对应情况2。</span><span class="token punctuation">&#123;</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"BUG\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span>graph<span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token punctuation">[</span>y<span class="token punctuation">]</span><span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span><span class="token comment">//标记已走过。</span><span class="token punctuation">&#125;</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"OK\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="三、后记"><a href="#三、后记" class="headerlink" title="三、后记"></a>三、后记</h3><p>记录：<a href="https://www.luogu.com.cn/record/51614002">https://www.luogu.com.cn/record/51614002</a>。</p><p>By <a href="https://www.luogu.com.cn/user/387836">dengzijun</a></p>]]></content>
      
      
      <categories>
          
          <category> 洛谷题解 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 暴力与模拟 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>洛谷UVA13012题解</title>
      <link href="/2021-06-30-LuoguUVA13012TJ/"/>
      <url>/2021-06-30-LuoguUVA13012TJ/</url>
      
        <content type="html"><![CDATA[<h3 id="一、题意简述"><a href="#一、题意简述" class="headerlink" title="一、题意简述"></a>一、题意简述</h3><p>给出一个数 $T$，代表这杯茶的种类。</p><p>再给出五个数，询问这五个数中，有几个数等于 $T$？</p><h3 id="二、思路"><a href="#二、思路" class="headerlink" title="二、思路"></a>二、思路</h3><p>没啥好讲的。。。一个个比对即可。</p><h3 id="三、完整代码"><a href="#三、完整代码" class="headerlink" title="三、完整代码"></a>三、完整代码</h3><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;cstdio></span></span><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">int</span> t<span class="token punctuation">,</span>a<span class="token punctuation">,</span>b<span class="token punctuation">,</span>c<span class="token punctuation">,</span>d<span class="token punctuation">,</span>e<span class="token punctuation">;</span><span class="token keyword">while</span><span class="token punctuation">(</span><span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%d%d%d%d%d%d"</span><span class="token punctuation">,</span><span class="token operator">&amp;</span>t<span class="token punctuation">,</span><span class="token operator">&amp;</span>a<span class="token punctuation">,</span><span class="token operator">&amp;</span>b<span class="token punctuation">,</span><span class="token operator">&amp;</span>c<span class="token punctuation">,</span><span class="token operator">&amp;</span>d<span class="token punctuation">,</span><span class="token operator">&amp;</span>e<span class="token punctuation">)</span><span class="token operator">!=</span><span class="token constant">EOF</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">int</span> cnt<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span><span class="token comment">//计数器。</span><span class="token keyword">if</span><span class="token punctuation">(</span>t<span class="token operator">==</span>a<span class="token punctuation">)</span><span class="token comment">//比对。</span><span class="token punctuation">&#123;</span>cnt<span class="token operator">++</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">if</span><span class="token punctuation">(</span>t<span class="token operator">==</span>b<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>cnt<span class="token operator">++</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">if</span><span class="token punctuation">(</span>t<span class="token operator">==</span>c<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>cnt<span class="token operator">++</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">if</span><span class="token punctuation">(</span>t<span class="token operator">==</span>d<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>cnt<span class="token operator">++</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">if</span><span class="token punctuation">(</span>t<span class="token operator">==</span>e<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>cnt<span class="token operator">++</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%d\n"</span><span class="token punctuation">,</span>cnt<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//输出。</span><span class="token punctuation">&#125;</span><span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token comment">//完结撒花！</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="四、后记"><a href="#四、后记" class="headerlink" title="四、后记"></a>四、后记</h3><p>记录：<a href="https://www.luogu.com.cn/record/51595257">https://www.luogu.com.cn/record/51595257</a>。</p><p>By <a href="https://www.luogu.com.cn/user/387836">dengzijun</a></p>]]></content>
      
      
      <categories>
          
          <category> 洛谷题解 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 暴力与模拟 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>洛谷UVA11679题解</title>
      <link href="/2021-06-30-LuoguUVA11679TJ/"/>
      <url>/2021-06-30-LuoguUVA11679TJ/</url>
      
        <content type="html"><![CDATA[<h3 id="一、题意简述"><a href="#一、题意简述" class="headerlink" title="一、题意简述"></a>一、题意简述</h3><p>有 $B$ 家银行，每一家银行都有一个初始的财产数额。有 $N$ 次操作，每一次操作包含三个数：$D$，$C$，$V$，表示从编号为 $D$ 的银行向编号为 $C$ 的银行移动 $V$ 个单位财产。最后，如果有一个银行的财产数额为负数，输出 <code>N</code>，否则输出 <code>S</code>。</p><h3 id="二、思路"><a href="#二、思路" class="headerlink" title="二、思路"></a>二、思路</h3><p>暴力模拟。</p><h3 id="三、完整代码"><a href="#三、完整代码" class="headerlink" title="三、完整代码"></a>三、完整代码</h3><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;cstdio></span></span><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">int</span> n<span class="token punctuation">,</span>m<span class="token punctuation">;</span><span class="token keyword">while</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%d%d"</span><span class="token punctuation">,</span><span class="token operator">&amp;</span>n<span class="token punctuation">,</span><span class="token operator">&amp;</span>m<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">if</span><span class="token punctuation">(</span>n<span class="token operator">==</span><span class="token number">0</span><span class="token operator">&amp;&amp;</span>m<span class="token operator">==</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token comment">//判定退出条件。</span><span class="token punctuation">&#123;</span><span class="token keyword">break</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">int</span> input<span class="token punctuation">[</span>n<span class="token operator">+</span><span class="token number">5</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>i<span class="token operator">&lt;=</span>n<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%d"</span><span class="token punctuation">,</span><span class="token operator">&amp;</span>input<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>i<span class="token operator">&lt;=</span>m<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">int</span> from<span class="token punctuation">,</span>to<span class="token punctuation">,</span>v<span class="token punctuation">;</span><span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%d%d%d"</span><span class="token punctuation">,</span><span class="token operator">&amp;</span>from<span class="token punctuation">,</span><span class="token operator">&amp;</span>to<span class="token punctuation">,</span><span class="token operator">&amp;</span>v<span class="token punctuation">)</span><span class="token punctuation">;</span>input<span class="token punctuation">[</span>from<span class="token punctuation">]</span><span class="token operator">-=</span>v<span class="token punctuation">;</span><span class="token comment">//移动。</span>input<span class="token punctuation">[</span>to<span class="token punctuation">]</span><span class="token operator">+=</span>v<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">bool</span> flag<span class="token operator">=</span><span class="token boolean">true</span><span class="token punctuation">;</span><span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>i<span class="token operator">&lt;=</span>n<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">if</span><span class="token punctuation">(</span>input<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">&lt;</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>flag<span class="token operator">=</span><span class="token boolean">false</span><span class="token punctuation">;</span><span class="token keyword">break</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">if</span><span class="token punctuation">(</span>flag<span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"S\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">else</span><span class="token punctuation">&#123;</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"N\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="四、后记"><a href="#四、后记" class="headerlink" title="四、后记"></a>四、后记</h3><p>记录：<a href="https://www.luogu.com.cn/record/51595081">https://www.luogu.com.cn/record/51595081</a>。</p><p>By <a href="https://www.luogu.com.cn/user/387836">dengzijun</a></p>]]></content>
      
      
      <categories>
          
          <category> 洛谷题解 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 暴力与模拟 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>洛谷UVA10071题解</title>
      <link href="/2021-06-28-LuoguUVA10071TJ/"/>
      <url>/2021-06-28-LuoguUVA10071TJ/</url>
      
        <content type="html"><![CDATA[<h3 id="一、题意简述"><a href="#一、题意简述" class="headerlink" title="一、题意简述"></a>一、题意简述</h3><p>粒子从静止到加速到速度为 $v$ 需要 $t$ 的时间，求粒子运动 $2\times t$ 时间后运动了多远。</p><h3 id="二、思路"><a href="#二、思路" class="headerlink" title="二、思路"></a>二、思路</h3><p>参考一下<a href="https://baike.baidu.com/item/%E5%8C%80%E5%8A%A0%E9%80%9F%E8%BF%90%E5%8A%A8/10607524?fr=aladdin">这篇百度百科</a>，可以得出，设匀加速运动初速为 $v0$（本题中为 $0$），最后速度为 $v1$（本题中为输入的 $v$），时间为 $t$，加速度为 $a$，运动距离为 $x$，则：</p><p>$a=(v1-v0)\div t$</p><p>$=v1\div t$</p><p>$x=v0\times t+\frac{1}{2}\times a \times t^2$</p><p>$=\frac{1}{2}\times (v1\div t) \times t^2$</p><p>$=\frac{1}{2}\times v1\times t$</p><p>然而，题目中求的是运动时间为 $2t$ 的运动距离。根据匀加速运动的路程公式，时间扩大至原来的 $2$ 倍，路程扩大至原来的 $4$ 倍。</p><p>由此得出本题的解答公式：$2\times v\times t$。</p><h3 id="三、完整代码"><a href="#三、完整代码" class="headerlink" title="三、完整代码"></a>三、完整代码</h3><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;cstdio></span></span><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">int</span> v<span class="token punctuation">,</span>t<span class="token punctuation">;</span><span class="token keyword">while</span><span class="token punctuation">(</span><span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%d%d"</span><span class="token punctuation">,</span><span class="token operator">&amp;</span>v<span class="token punctuation">,</span><span class="token operator">&amp;</span>t<span class="token punctuation">)</span><span class="token operator">!=</span><span class="token constant">EOF</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%d\n"</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token operator">*</span>v<span class="token operator">*</span>t<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token comment">//完结撒花！</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="四、后记"><a href="#四、后记" class="headerlink" title="四、后记"></a>四、后记</h3><p>记录：<a href="https://www.luogu.com.cn/record/51594406">https://www.luogu.com.cn/record/51594406</a>。</p><p>By <a href="https://www.luogu.com.cn/user/387836">dengzijun</a></p>]]></content>
      
      
      <categories>
          
          <category> 洛谷题解 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 数学知识 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>洛谷UVA00913题解</title>
      <link href="/2021-06-28-LuoguUVA00913TJ/"/>
      <url>/2021-06-28-LuoguUVA00913TJ/</url>
      
        <content type="html"><![CDATA[<h3 id="一、题目翻译"><a href="#一、题目翻译" class="headerlink" title="一、题目翻译"></a>一、题目翻译</h3><h4 id="题目描述翻译"><a href="#题目描述翻译" class="headerlink" title="题目描述翻译"></a>题目描述翻译</h4><p>Joana 喜欢玩奇数。一天，她开始了书写。在每一行，她写下了一个又一个奇数。就像下面这样：</p><p>$1$</p><p>$3,5,7$</p><p>$9,11,13,15,17$</p><p>$19,21,23,25,27,29,31$</p><p>$…$</p><p>在某一行，Joana 写下了 $55$ 个奇数。你能找出这一行的最后 $3$ 个奇数之和吗？一般地，给你一个数代表某一行奇数的个数，你能找出这一行的最后 $3$ 个奇数之和吗？</p><p>输入的每一行会给出一个数 $N$ 代表某一行的奇数的个数，你的任务就是找出这一行的最后 $3$ 个奇数之和。</p><h4 id="输入格式翻译"><a href="#输入格式翻译" class="headerlink" title="输入格式翻译"></a>输入格式翻译</h4><p>输入有多行，每一行是一个数 $N$（$1&lt;N&lt;1000000000$），意义如题目描述。</p><h4 id="输出格式翻译"><a href="#输出格式翻译" class="headerlink" title="输出格式翻译"></a>输出格式翻译</h4><p>对于每一个输入，输出一个数，代表奇数个数为 $N$ 的那一行的最后 $3$ 个奇数之和。保证答案小于 $2^{63}$。</p><h3 id="二、思路"><a href="#二、思路" class="headerlink" title="二、思路"></a>二、思路</h3><p>不必死算。</p><p>首先，我们先算出，Joana 到目前为止写下了多少个奇数？</p><p>我们可以推算出，Joana 写下了 $(N+1)\div2$ 行，使用等差数列求和公式就可以得出 Joana 写下了 $((N+1)\times(N+1)\div2)\div2$ 个奇数，记为 $A$。</p><p>然后，Joana 到目前为止写下的最后一个奇数是多少？不难推算出是 $A\times2-1$，再依次推算得出答案为 $(A\times2-1)+(A\times2-3)+(A\times2-5)$。</p><p>于是我们就可以得出代码。鉴于数据范围较大，请务必使用 <code>long long</code> 数据结构，并使用位运算代替乘法。</p><h3 id="三、完整代码"><a href="#三、完整代码" class="headerlink" title="三、完整代码"></a>三、完整代码</h3><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;cstdio></span></span><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">long</span> <span class="token keyword">long</span> N<span class="token punctuation">;</span><span class="token keyword">while</span><span class="token punctuation">(</span><span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%lld"</span><span class="token punctuation">,</span><span class="token operator">&amp;</span>N<span class="token punctuation">)</span><span class="token operator">!=</span><span class="token constant">EOF</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">long</span> <span class="token keyword">long</span> odd_number<span class="token operator">=</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token operator">+</span>N<span class="token punctuation">)</span><span class="token operator">*</span><span class="token punctuation">(</span><span class="token punctuation">(</span>N<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token operator">>></span><span class="token number">1</span><span class="token punctuation">)</span><span class="token operator">>></span><span class="token number">1</span><span class="token punctuation">;</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%lld\n"</span><span class="token punctuation">,</span><span class="token punctuation">(</span><span class="token punctuation">(</span>odd_number<span class="token operator">&lt;&lt;</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token punctuation">(</span><span class="token punctuation">(</span>odd_number<span class="token operator">&lt;&lt;</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token operator">-</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token punctuation">(</span><span class="token punctuation">(</span>odd_number<span class="token operator">&lt;&lt;</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token operator">-</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token comment">//完结撒花！</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="四、后记"><a href="#四、后记" class="headerlink" title="四、后记"></a>四、后记</h3><p>记录：<a href="https://www.luogu.com.cn/record/51593635">https://www.luogu.com.cn/record/51593635</a>。</p><p>By <a href="https://www.luogu.com.cn/user/387836">dengzijun</a></p>]]></content>
      
      
      <categories>
          
          <category> 洛谷题解 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 数学知识 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>洛谷CF0096B题解</title>
      <link href="/2021-06-28-LuoguCF0096BTJ/"/>
      <url>/2021-06-28-LuoguCF0096BTJ/</url>
      
        <content type="html"><![CDATA[<h3 id="一、思路"><a href="#一、思路" class="headerlink" title="一、思路"></a>一、思路</h3><p>本题可以使用<a href="https://baike.baidu.com/item/%E5%AE%BD%E5%BA%A6%E4%BC%98%E5%85%88%E6%90%9C%E7%B4%A2/5224802?fromtitle=BFS&amp;fromid=542084&amp;fr=aladdin">宽度优先搜索</a>去做。</p><p>我们可以一步步枚举只含有 $4$ 和 $7$ 的数字，每一次增加 $4$ 或 $7$ 作为扩展，直到找到符合要求的数字为止。</p><p>本题 $1\le n\le10^9$，并不是很大，但是需要使用 <code>long long</code> 数据结构。</p><h3 id="二、完整代码"><a href="#二、完整代码" class="headerlink" title="二、完整代码"></a>二、完整代码</h3><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;cstdio></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;queue></span></span><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">int</span> <span class="token expression"><span class="token keyword">long</span> <span class="token keyword">long</span></span><span class="token comment">//一劳永逸。</span></span><span class="token keyword">int</span> n<span class="token punctuation">;</span>queue<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span>num_list<span class="token punctuation">;</span><span class="token comment">//BFS队列。</span><span class="token keyword">bool</span> <span class="token function">check</span><span class="token punctuation">(</span><span class="token keyword">int</span> num<span class="token punctuation">)</span><span class="token comment">//检查数据是否符合要求。</span><span class="token punctuation">&#123;</span><span class="token keyword">if</span><span class="token punctuation">(</span>num<span class="token operator">&lt;</span>n<span class="token punctuation">)</span><span class="token comment">//太小，不可能。</span><span class="token punctuation">&#123;</span><span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">int</span> temp<span class="token operator">=</span>num<span class="token punctuation">;</span><span class="token keyword">int</span> cnt_4<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">,</span>cnt_7<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span><span class="token keyword">while</span><span class="token punctuation">(</span>temp<span class="token punctuation">)</span><span class="token comment">//数数位。</span><span class="token punctuation">&#123;</span><span class="token keyword">int</span> digit<span class="token operator">=</span>temp<span class="token operator">%</span><span class="token number">10</span><span class="token punctuation">;</span>temp<span class="token operator">/=</span><span class="token number">10</span><span class="token punctuation">;</span><span class="token keyword">if</span><span class="token punctuation">(</span>digit<span class="token operator">==</span><span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>cnt_4<span class="token operator">++</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span>digit<span class="token operator">==</span><span class="token number">7</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>cnt_7<span class="token operator">++</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">else</span><span class="token punctuation">&#123;</span><span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">if</span><span class="token punctuation">(</span>cnt_4<span class="token operator">==</span>cnt_7<span class="token punctuation">)</span><span class="token comment">//4与7的数量一致：</span><span class="token punctuation">&#123;</span><span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">else</span><span class="token punctuation">&#123;</span><span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">signed</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%lld"</span><span class="token punctuation">,</span><span class="token operator">&amp;</span>n<span class="token punctuation">)</span><span class="token punctuation">;</span>num_list<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//先让0进队，占个位置。</span><span class="token keyword">while</span><span class="token punctuation">(</span><span class="token operator">!</span>num_list<span class="token punctuation">.</span><span class="token function">empty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">int</span> num<span class="token operator">=</span>num_list<span class="token punctuation">.</span><span class="token function">front</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//取数。</span>num_list<span class="token punctuation">.</span><span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//弹出。</span><span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">check</span><span class="token punctuation">(</span>num<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%lld\n"</span><span class="token punctuation">,</span>num<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//输出。</span><span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token comment">//完结撒花！</span><span class="token punctuation">&#125;</span>num_list<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>num<span class="token operator">*</span><span class="token number">10</span><span class="token operator">+</span><span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">;</span>num_list<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>num<span class="token operator">*</span><span class="token number">10</span><span class="token operator">+</span><span class="token number">7</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//思考：以上两行是否可以互换？</span><span class="token punctuation">&#125;</span><span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="三、思考题答案"><a href="#三、思考题答案" class="headerlink" title="三、思考题答案"></a>三、思考题答案</h3><p>当然不行。因为，如果互换，因为只要 $num\ge0$，就有 $num\times10+4&lt;num\times10+7$，而互换代码就导致输出的数字可能不是最小的，而是第二小的。</p><h3 id="四、后记"><a href="#四、后记" class="headerlink" title="四、后记"></a>四、后记</h3><p>记录：<a href="https://www.luogu.com.cn/record/51569117">https://www.luogu.com.cn/record/51569117</a>。</p><p>By <a href="https://www.luogu.com.cn/user/387836">dengzijun</a></p>]]></content>
      
      
      <categories>
          
          <category> 洛谷题解 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> BFS宽度优先搜索 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>洛谷P2757题解</title>
      <link href="/2021-06-28-LuoguP2757TJ/"/>
      <url>/2021-06-28-LuoguP2757TJ/</url>
      
        <content type="html"><![CDATA[<h3 id="一、思路"><a href="#一、思路" class="headerlink" title="一、思路"></a>一、思路</h3><p>本题可以使用桶去做。</p><p>设 $array[i]$ 为输入的第 $i$ 个数。</p><p>设 $tong[i]$ 为数字 $i$ 在输入中的出现位置。因为输入的每个数字都不一样，所以此方法可行。</p><p>然后枚举两个数：$i$ 和 $j$ 并保证 $i&lt;j$。根据等差数列的性质，第二个数减第一个数为公差，第三个数减第二个数也是公差，所以第三个数就是第二个数减第一个数加第二个数。</p><p>而“第一个数”就是 $array[i]$，“第二个数”就是 $array[j]$，如果 $array[j]-array[i]+array[j]$ 存在并且所在位置大于 $j$，即可输出“Y”。</p><p>如果枚举过后没有找到答案，则输出“N”。</p><p>在最坏情况下，时间复杂度为 $O(T\times N\times (N-1) \div2)$，如果 $T=7$ 且 $N=10000$，则时间复杂度为 $O(349965000)$，有点悬，但还是可以过的。</p><h3 id="二、完整代码"><a href="#二、完整代码" class="headerlink" title="二、完整代码"></a>二、完整代码</h3><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;cstdio></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;cstring></span></span><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span><span class="token keyword">int</span> t<span class="token punctuation">;</span><span class="token keyword">int</span> array<span class="token punctuation">[</span><span class="token number">1000000</span><span class="token punctuation">]</span><span class="token punctuation">,</span>tong<span class="token punctuation">[</span><span class="token number">1000000</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%d"</span><span class="token punctuation">,</span><span class="token operator">&amp;</span>t<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">while</span><span class="token punctuation">(</span>t<span class="token operator">--</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token function">memset</span><span class="token punctuation">(</span>array<span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span>array<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//清空数组。</span><span class="token function">memset</span><span class="token punctuation">(</span>tong<span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span>tong<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">int</span> n<span class="token punctuation">;</span><span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%d"</span><span class="token punctuation">,</span><span class="token operator">&amp;</span>n<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>i<span class="token operator">&lt;=</span>n<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%d"</span><span class="token punctuation">,</span><span class="token operator">&amp;</span>array<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>tong<span class="token punctuation">[</span>array<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token operator">=</span>i<span class="token punctuation">;</span><span class="token comment">//存储桶。</span><span class="token punctuation">&#125;</span><span class="token keyword">bool</span> flag<span class="token operator">=</span><span class="token boolean">false</span><span class="token punctuation">;</span><span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>i<span class="token operator">&lt;=</span>n<span class="token operator">-</span><span class="token number">1</span><span class="token operator">&amp;&amp;</span>flag<span class="token operator">==</span><span class="token boolean">false</span><span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> j<span class="token operator">=</span>i<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">;</span>j<span class="token operator">&lt;=</span>n<span class="token operator">&amp;&amp;</span>flag<span class="token operator">==</span><span class="token boolean">false</span><span class="token punctuation">;</span>j<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">if</span><span class="token punctuation">(</span>tong<span class="token punctuation">[</span>array<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token operator">-</span>array<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">+</span>array<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token operator">></span>j<span class="token punctuation">)</span><span class="token comment">//如果符合要求：</span><span class="token punctuation">&#123;</span>flag<span class="token operator">=</span><span class="token boolean">true</span><span class="token punctuation">;</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"Y\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//输出Y。</span><span class="token keyword">break</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span>flag<span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"N\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//输出N。</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token comment">//完结撒花！</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="三、后记"><a href="#三、后记" class="headerlink" title="三、后记"></a>三、后记</h3><p>这道题我花了几十分钟才做出来，但其实不难，大概是绿题或蓝题的水平。</p><p>记录：<a href="https://www.luogu.com.cn/record/50300561">https://www.luogu.com.cn/record/50300561</a>。</p><p>By <a href="https://www.luogu.com.cn/user/387836">dengzijun</a></p>]]></content>
      
      
      <categories>
          
          <category> 洛谷题解 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 数学知识 </tag>
            
            <tag> 桶 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>洛谷CF0920题解</title>
      <link href="/2021-06-28-LuoguCF0920ATJ/"/>
      <url>/2021-06-28-LuoguCF0920ATJ/</url>
      
        <content type="html"><![CDATA[<h3 id="一、思路"><a href="#一、思路" class="headerlink" title="一、思路"></a>一、思路</h3><p>设 $garden[i]$ 为第 $i$ 个方块的浇水所需时间。</p><p>本题可以在每次读入水龙头位置 $x$ 时，可以先把 $garden[x]$ 设为 $1$，然后遍历整个 $garden$ 数组，如果 $garden[i]&lt;abs(x-i)+1$，那么就把 $garden[i]$ 更新为 $abs(x-i)+1$。</p><p>最后，输出 $garden$ 的最大值。</p><p>时间复杂度是 $O(t\times k\times n^2+n)$，在最坏情况下（$t=k=n=200$），时间复杂度是 $O(8000200)$，也不算太大。</p><h3 id="二、完整代码"><a href="#二、完整代码" class="headerlink" title="二、完整代码"></a>二、完整代码</h3><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;cstdio></span></span><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">int</span> t<span class="token punctuation">;</span><span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%d"</span><span class="token punctuation">,</span><span class="token operator">&amp;</span>t<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> time<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>time<span class="token operator">&lt;=</span>t<span class="token punctuation">;</span>time<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">int</span> n<span class="token punctuation">,</span>k<span class="token punctuation">;</span><span class="token keyword">int</span> garden<span class="token punctuation">[</span><span class="token number">205</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%d%d"</span><span class="token punctuation">,</span><span class="token operator">&amp;</span>n<span class="token punctuation">,</span><span class="token operator">&amp;</span>k<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>i<span class="token operator">&lt;=</span>n<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token comment">//初始化。思考：为什么garden要被初始化为那么大的数值？</span><span class="token punctuation">&#123;</span>garden<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">=</span><span class="token number">387836</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>i<span class="token operator">&lt;=</span>k<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">int</span> x<span class="token punctuation">;</span><span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%d"</span><span class="token punctuation">,</span><span class="token operator">&amp;</span>x<span class="token punctuation">)</span><span class="token punctuation">;</span>garden<span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span><span class="token comment">//水龙头所在位置，浇水时间为1。</span><span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> j<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>j<span class="token operator">&lt;</span>x<span class="token punctuation">;</span>j<span class="token operator">++</span><span class="token punctuation">)</span><span class="token comment">//水龙头所在位置之前。</span><span class="token punctuation">&#123;</span><span class="token keyword">if</span><span class="token punctuation">(</span>garden<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token operator">></span>x<span class="token operator">-</span>j<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>garden<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token operator">=</span>x<span class="token operator">-</span>j<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> j<span class="token operator">=</span>x<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">;</span>j<span class="token operator">&lt;=</span>n<span class="token punctuation">;</span>j<span class="token operator">++</span><span class="token punctuation">)</span><span class="token comment">//水龙头所在位置之后。</span><span class="token punctuation">&#123;</span><span class="token keyword">if</span><span class="token punctuation">(</span>garden<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token operator">></span>j<span class="token operator">-</span>x<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>garden<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token operator">=</span>j<span class="token operator">-</span>x<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">int</span> ans<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span><span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>i<span class="token operator">&lt;=</span>n<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token comment">//遍历，求最大值。</span><span class="token punctuation">&#123;</span><span class="token keyword">if</span><span class="token punctuation">(</span>garden<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">></span>ans<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>ans<span class="token operator">=</span>garden<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%d\n"</span><span class="token punctuation">,</span>ans<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//输出。</span><span class="token punctuation">&#125;</span><span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token comment">//完结撒花！</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="三、思考题答案"><a href="#三、思考题答案" class="headerlink" title="三、思考题答案"></a>三、思考题答案</h3><p>不难理解，因为在读入水龙头位置时取最小值，如果初始化的值比真实情况还要小，就有可能出现错误的答案。</p><h3 id="四、后记"><a href="#四、后记" class="headerlink" title="四、后记"></a>四、后记</h3><p>记录：<a href="https://www.luogu.com.cn/record/51525485">https://www.luogu.com.cn/record/51525485</a>。</p><p>By <a href="https://www.luogu.com.cn/user/387836">dengzijun</a></p>]]></content>
      
      
      <categories>
          
          <category> 洛谷题解 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 暴力与模拟 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>洛谷CF1006C题解</title>
      <link href="/2021-06-28-LuoguCF1006CTJ/"/>
      <url>/2021-06-28-LuoguCF1006CTJ/</url>
      
        <content type="html"><![CDATA[<h3 id="一、思路"><a href="#一、思路" class="headerlink" title="一、思路"></a>一、思路</h3><p>本题 $1\le n\le2\times10^5$，数据范围并不大，不需要二分，但需要前缀和优化。</p><p>我们可以维护两个变量：$a$ 和 $c$，意义与题目所述相同。</p><p>然后循环，根据 $a$ 和 $c$ 计算出 $sum_1$ 与 $sum_3$ 的值，比较一下，出现以下 $3$ 种情况。</p><ol><li><p>$sum_1=sum_3$，此时：</p><ol><li><p>如果 $sum_1&gt;ans$，更新 $ans$。</p></li><li><p>将 $a$ 加 $1$，同时将 $c$ 加 $1$。</p></li></ol></li><li><p>$sum_1&lt;sum_3$，此时将 $a$ 加 $1$。</p></li><li><p>$sum_1&gt;sum_3$，此时将 $c$ 加 $1$。</p></li></ol><p>直到 $a+c&gt;n$ 时，说明“第一部分”和“第三部分”有重合，此时退出循环并输出结果。</p><p>另外，由于 $ans$ 已被初始化为 $0$，所以如果始终没有出现 $sum_1=sum_3$ 的情况，将输出 $0$。</p><h3 id="二、完整代码"><a href="#二、完整代码" class="headerlink" title="二、完整代码"></a>二、完整代码</h3><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;cstdio></span></span><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span><span class="token keyword">int</span> n<span class="token punctuation">;</span><span class="token keyword">long</span> <span class="token keyword">long</span> input<span class="token punctuation">[</span><span class="token number">200005</span><span class="token punctuation">]</span><span class="token punctuation">,</span>pre<span class="token punctuation">[</span><span class="token number">200005</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token comment">//input负责存储输入，pre负责维护前缀和。</span><span class="token keyword">int</span> a<span class="token punctuation">,</span>c<span class="token punctuation">;</span><span class="token keyword">long</span> <span class="token keyword">long</span> ans<span class="token punctuation">;</span><span class="token comment">//十年OI一场空，不开long long见祖宗。</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%d"</span><span class="token punctuation">,</span><span class="token operator">&amp;</span>n<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>i<span class="token operator">&lt;=</span>n<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%lld"</span><span class="token punctuation">,</span><span class="token operator">&amp;</span>input<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>pre<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">=</span>pre<span class="token punctuation">[</span>i<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">+</span>input<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token comment">//计算前缀和。</span><span class="token punctuation">&#125;</span><span class="token keyword">while</span><span class="token punctuation">(</span>a<span class="token operator">+</span>c<span class="token operator">&lt;=</span>n<span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">long</span> <span class="token keyword">long</span> sum_a<span class="token operator">=</span>pre<span class="token punctuation">[</span>a<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token comment">//其实这里的完整版是pre[a]-pre[0]，因为pre[0]=0，所以省略了。</span><span class="token keyword">long</span> <span class="token keyword">long</span> sum_c<span class="token operator">=</span>pre<span class="token punctuation">[</span>n<span class="token punctuation">]</span><span class="token operator">-</span>pre<span class="token punctuation">[</span>n<span class="token operator">-</span>c<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">if</span><span class="token punctuation">(</span>sum_a<span class="token operator">==</span>sum_c<span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">if</span><span class="token punctuation">(</span>ans<span class="token operator">&lt;</span>sum_a<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>ans<span class="token operator">=</span>sum_a<span class="token punctuation">;</span><span class="token punctuation">&#125;</span>a<span class="token operator">++</span><span class="token punctuation">;</span>c<span class="token operator">++</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span>sum_a<span class="token operator">&lt;</span>sum_c<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>a<span class="token operator">++</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span>sum_a<span class="token operator">></span>sum_c<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>c<span class="token operator">++</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%lld\n"</span><span class="token punctuation">,</span>ans<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//输出。</span><span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token comment">//完结撒花！</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="三、后记"><a href="#三、后记" class="headerlink" title="三、后记"></a>三、后记</h3><p>记录：<a href="https://www.luogu.com.cn/record/51499255">https://www.luogu.com.cn/record/51499255</a>。</p><p>By <a href="https://www.luogu.com.cn/user/387836">dengzijun</a></p>]]></content>
      
      
      <categories>
          
          <category> 洛谷题解 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 前缀和 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>洛谷UVA00151题解</title>
      <link href="/2021-06-28-LuoguUVA00151TJ/"/>
      <url>/2021-06-28-LuoguUVA00151TJ/</url>
      
        <content type="html"><![CDATA[<h3 id="一、基本思路"><a href="#一、基本思路" class="headerlink" title="一、基本思路"></a>一、基本思路</h3><p>本题考察<a href="https://baike.baidu.com/item/%E7%BA%A6%E7%91%9F%E5%A4%AB%E9%97%AE%E9%A2%98/3857719?fromtitle=%E7%BA%A6%E7%91%9F%E5%A4%AB%E7%8E%AF&amp;fromid=348830&amp;fr=aladdin">约瑟夫环</a>的知识。</p><p>数据范围是 $13\le N &lt;100$，还算比较小，可以暴力模拟。</p><h3 id="二、具体思路"><a href="#二、具体思路" class="headerlink" title="二、具体思路"></a>二、具体思路</h3><p>现在的问题是，如何暴力模拟约瑟夫环。</p><p>我们可以创建一个队列，初始状态下，该队列从队头到队尾依次为 $1$ 到 $N$。</p><p>然后循环以下操作，直到队列中只有一个数字。</p><ol><li><p>弹出队头，并不再进入队列中。</p></li><li><p>将一个数弹出队头，但立即进入队尾。本步骤重复 $m-1$ 次。</p></li></ol><p>该队列中只有一个数字时，这个数字就是“最后一个出列的数字”。只需判断这是不是 $13$ 即可。</p><h3 id="三、完整代码"><a href="#三、完整代码" class="headerlink" title="三、完整代码"></a>三、完整代码</h3><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;cstdio></span></span><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span><span class="token keyword">bool</span> <span class="token function">check</span><span class="token punctuation">(</span><span class="token keyword">int</span> m<span class="token punctuation">,</span><span class="token keyword">int</span> n<span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">int</span> queue<span class="token punctuation">[</span><span class="token number">10000</span><span class="token punctuation">]</span><span class="token punctuation">,</span>front<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">,</span>back<span class="token operator">=</span>n<span class="token punctuation">;</span><span class="token comment">//queue代表队列数组，front代表队头指针，back代表队尾指针。</span><span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>i<span class="token operator">&lt;=</span>n<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>queue<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">=</span>i<span class="token punctuation">;</span><span class="token comment">//初始化。</span><span class="token punctuation">&#125;</span><span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>back<span class="token operator">!=</span>front<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token comment">//当back=front时，队列中只剩一个数字。</span><span class="token punctuation">&#123;</span>front<span class="token operator">++</span><span class="token punctuation">;</span><span class="token comment">//执行上面的步骤1。</span><span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> j<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>j<span class="token operator">&lt;=</span>m<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>j<span class="token operator">++</span><span class="token punctuation">)</span><span class="token comment">//重复执行上面的步骤2。</span><span class="token punctuation">&#123;</span>back<span class="token operator">++</span><span class="token punctuation">;</span>queue<span class="token punctuation">[</span>back<span class="token punctuation">]</span><span class="token operator">=</span>queue<span class="token punctuation">[</span>front<span class="token punctuation">]</span><span class="token punctuation">;</span>front<span class="token operator">++</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">return</span> queue<span class="token punctuation">[</span>front<span class="token punctuation">]</span><span class="token operator">==</span><span class="token number">13</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">while</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">int</span> n<span class="token punctuation">;</span><span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%d"</span><span class="token punctuation">,</span><span class="token operator">&amp;</span>n<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">if</span><span class="token punctuation">(</span>n<span class="token operator">==</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">break</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> m<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>m<span class="token operator">&lt;=</span>n<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>m<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">check</span><span class="token punctuation">(</span>m<span class="token punctuation">,</span>n<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%d\n"</span><span class="token punctuation">,</span>m<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">break</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="四、后记"><a href="#四、后记" class="headerlink" title="四、后记"></a>四、后记</h3><p>记录：<a href="https://www.luogu.com.cn/record/51405789">https://www.luogu.com.cn/record/51405789</a>。</p><p>By <a href="https://www.luogu.com.cn/user/387836">dengzijun</a></p>]]></content>
      
      
      <categories>
          
          <category> 洛谷题解 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 队列 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>洛谷UVA10583题解</title>
      <link href="/2021-06-28-LuoguUVA10583TJ/"/>
      <url>/2021-06-28-LuoguUVA10583TJ/</url>
      
        <content type="html"><![CDATA[<h3 id="一、思路"><a href="#一、思路" class="headerlink" title="一、思路"></a>一、思路</h3><p>本题考察并查集。</p><p>在每组数据的一开始，先把 $ans$ 设为 $n$，我们可以在每次连边之前，检查一下连边的两个点是不是已经连通。如果不是，$ans$ 减 $1$，并将并查集的这两个点合并。最后输出 $ans$ 即可。</p><h3 id="二、完整代码"><a href="#二、完整代码" class="headerlink" title="二、完整代码"></a>二、完整代码</h3><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;cstdio></span></span><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span><span class="token keyword">int</span> n<span class="token punctuation">,</span>m<span class="token punctuation">,</span>case_id<span class="token punctuation">;</span><span class="token keyword">int</span> ans<span class="token punctuation">;</span><span class="token keyword">int</span> father<span class="token punctuation">[</span><span class="token number">50005</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token comment">//并查集。</span><span class="token keyword">int</span> <span class="token function">find_father</span><span class="token punctuation">(</span><span class="token keyword">int</span> x<span class="token punctuation">)</span><span class="token comment">//寻找祖先。</span><span class="token punctuation">&#123;</span><span class="token keyword">if</span><span class="token punctuation">(</span>x<span class="token operator">==</span>father<span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">return</span> x<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">return</span> father<span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token operator">=</span><span class="token function">find_father</span><span class="token punctuation">(</span>father<span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">while</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%d%d"</span><span class="token punctuation">,</span><span class="token operator">&amp;</span>n<span class="token punctuation">,</span><span class="token operator">&amp;</span>m<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">if</span><span class="token punctuation">(</span>n<span class="token operator">==</span><span class="token number">0</span><span class="token operator">&amp;&amp;</span>m<span class="token operator">==</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token comment">//退出条件判定。</span><span class="token punctuation">&#123;</span><span class="token keyword">break</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span>ans<span class="token operator">=</span>n<span class="token punctuation">;</span><span class="token comment">//初始化ans。</span>case_id<span class="token operator">++</span><span class="token punctuation">;</span><span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>i<span class="token operator">&lt;=</span>n<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token comment">//初始化并查集数组。</span><span class="token punctuation">&#123;</span>father<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">=</span>i<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>i<span class="token operator">&lt;=</span>m<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">int</span> x<span class="token punctuation">,</span>y<span class="token punctuation">;</span><span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%d%d"</span><span class="token punctuation">,</span><span class="token operator">&amp;</span>x<span class="token punctuation">,</span><span class="token operator">&amp;</span>y<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">int</span> u<span class="token operator">=</span><span class="token function">find_father</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">,</span>v<span class="token operator">=</span><span class="token function">find_father</span><span class="token punctuation">(</span>y<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//寻找这两个点的祖先。</span><span class="token keyword">if</span><span class="token punctuation">(</span>u<span class="token operator">!=</span>v<span class="token punctuation">)</span><span class="token comment">//祖先不一致，两个点并未连通，则连边。</span><span class="token punctuation">&#123;</span>ans<span class="token operator">--</span><span class="token punctuation">;</span>father<span class="token punctuation">[</span>u<span class="token punctuation">]</span><span class="token operator">=</span>v<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"Case %d: %d\n"</span><span class="token punctuation">,</span>case_id<span class="token punctuation">,</span>ans<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//输出。</span><span class="token punctuation">&#125;</span><span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token comment">//完结撒花！</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="四、后记"><a href="#四、后记" class="headerlink" title="四、后记"></a>四、后记</h3><p>记录：<a href="https://www.luogu.com.cn/record/51480327">https://www.luogu.com.cn/record/51480327</a>。</p><p>By <a href="https://www.luogu.com.cn/user/387836">dengzijun</a></p>]]></content>
      
      
      <categories>
          
          <category> 洛谷题解 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 并查集 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>洛谷UVA00108题解</title>
      <link href="/2021-06-28-LuoguUVA00108TJ/"/>
      <url>/2021-06-28-LuoguUVA00108TJ/</url>
      
        <content type="html"><![CDATA[<h3 id="一、粗略思路-amp-前置芝士"><a href="#一、粗略思路-amp-前置芝士" class="headerlink" title="一、粗略思路&amp;前置芝士"></a>一、粗略思路&amp;前置芝士</h3><p>本题的数据范围是 $N\le100$，可以使用<a href="https://blog.csdn.net/qq_34990731/article/details/82807870">二维前缀和</a>去做。</p><p>二维前缀和有一个关键数组，命名为 $pre$。其中 $pre[i][j]$ 表示第 $i$ 行第 $j$ 列的二维前缀和。</p><p>设 $input[i][j]$ 是题目中的输入矩阵第 $i$ 行第 $j$ 列。</p><p>二维前缀和有两个关键公式。</p><ol><li>求二维前缀和：计算公式为$pre[i][j]=pre[i-1][j]+pre[i][j-1]-pre[i-1][j-1]+input[i][j]$。此步骤可以在输入时去做。</li><li>求二维区间和：设左上角端点位于第 $x1$ 行第 $y1$ 列，右上角端点位于第 $x2$ 行第 $y2$ 列，则求出此区间之和的计算公式为 $sum=pre[x2][y2]+pre[x1-1][y1-1]-pre[x2][y1-1]-pre[x1-1][y2]$。</li></ol><p>使用二维前缀和之后，每一次查询二维区间和的操作的时间复杂度就降到了 $O(1)$，大大加快了不少。</p><h3 id="二、具体思路"><a href="#二、具体思路" class="headerlink" title="二、具体思路"></a>二、具体思路</h3><p>本题要求一个子矩阵，这个子矩阵中的数之和最大。</p><p>那么，我们可以使用 $O(N^2)$ 的时间复杂度进行输入&amp;预处理二维前缀和，然后再使用小于 $O(N^4)$ 的时间复杂度进行枚举，总时间复杂度在最坏情况下（$N=100$）小于 $O(100010000)$，$3s$ 的时间绝对足够。</p><h3 id="三、完整代码"><a href="#三、完整代码" class="headerlink" title="三、完整代码"></a>三、完整代码</h3><p>还是那句话：道路千万条，诚信第一条。直接抄题解，棕名两行泪。</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;cstdio></span></span><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span><span class="token keyword">int</span> input<span class="token punctuation">[</span><span class="token number">101</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">101</span><span class="token punctuation">]</span><span class="token punctuation">,</span>pre<span class="token punctuation">[</span><span class="token number">101</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">101</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token comment">//input为输入数组，pre为二维前缀和数组。</span><span class="token keyword">int</span> n<span class="token punctuation">;</span><span class="token keyword">int</span> ans<span class="token operator">=</span><span class="token operator">-</span><span class="token number">999999</span><span class="token punctuation">;</span><span class="token comment">//ans一定要设置成很小的值，因为答案有可能为负数，ans的初始值不能为0。</span><span class="token keyword">inline</span> <span class="token keyword">int</span> <span class="token function">max</span><span class="token punctuation">(</span><span class="token keyword">int</span> a<span class="token punctuation">,</span><span class="token keyword">int</span> b<span class="token punctuation">)</span><span class="token comment">//定义max函数求两个数的最大值。</span><span class="token punctuation">&#123;</span><span class="token keyword">return</span> a<span class="token operator">></span>b<span class="token operator">?</span>a<span class="token operator">:</span>b<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%d"</span><span class="token punctuation">,</span><span class="token operator">&amp;</span>n<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//输入n。</span><span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>i<span class="token operator">&lt;=</span>n<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> j<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>j<span class="token operator">&lt;=</span>n<span class="token punctuation">;</span>j<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%d"</span><span class="token punctuation">,</span><span class="token operator">&amp;</span>input<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//输入矩阵。</span>pre<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token operator">=</span>pre<span class="token punctuation">[</span>i<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token operator">+</span>pre<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">-</span>pre<span class="token punctuation">[</span>i<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">+</span>input<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token comment">//计算二维前缀和。</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> x1<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>x1<span class="token operator">&lt;=</span>n<span class="token punctuation">;</span>x1<span class="token operator">++</span><span class="token punctuation">)</span><span class="token comment">//枚举左上角端点。</span><span class="token punctuation">&#123;</span><span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> y1<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>y1<span class="token operator">&lt;=</span>n<span class="token punctuation">;</span>y1<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> x2<span class="token operator">=</span>x1<span class="token punctuation">;</span>x2<span class="token operator">&lt;=</span>n<span class="token punctuation">;</span>x2<span class="token operator">++</span><span class="token punctuation">)</span>枚举右下角端点。<span class="token punctuation">&#123;</span><span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> y2<span class="token operator">=</span>y1<span class="token punctuation">;</span>y2<span class="token operator">&lt;=</span>n<span class="token punctuation">;</span>y2<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>ans<span class="token operator">=</span><span class="token function">max</span><span class="token punctuation">(</span>ans<span class="token punctuation">,</span>pre<span class="token punctuation">[</span>x2<span class="token punctuation">]</span><span class="token punctuation">[</span>y2<span class="token punctuation">]</span><span class="token operator">+</span>pre<span class="token punctuation">[</span>x1<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>y1<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">-</span>pre<span class="token punctuation">[</span>x2<span class="token punctuation">]</span><span class="token punctuation">[</span>y1<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">-</span>pre<span class="token punctuation">[</span>x1<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>y2<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//计算二维区间和，并与ans取最大值。</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%d\n"</span><span class="token punctuation">,</span>ans<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//输出。</span><span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token comment">//完结撒花！</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="四、后记"><a href="#四、后记" class="headerlink" title="四、后记"></a>四、后记</h3><p>记录：<a href="https://www.luogu.com.cn/record/51405789">https://www.luogu.com.cn/record/51405789</a>。</p><p>By <a href="https://www.luogu.com.cn/user/387836">dengzijun</a></p>]]></content>
      
      
      <categories>
          
          <category> 洛谷题解 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 前缀和 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>洛谷UVA10000题解</title>
      <link href="/2021-06-28-LuoguUVA10000TJ/"/>
      <url>/2021-06-28-LuoguUVA10000TJ/</url>
      
        <content type="html"><![CDATA[<h3 id="一、思路"><a href="#一、思路" class="headerlink" title="一、思路"></a>一、思路</h3><p>本题中 $n \le 100$，数据量不大，可以用<a href="https://baike.baidu.com/item/Floyd%E7%AE%97%E6%B3%95/291990?fr=aladdin">弗洛伊德最短路算法</a>去做。</p><p>Q1：等等，Floyd 不是最短路算法吗？怎么能解决本题最长路？</p><p>A1：那就魔改一下。</p><p>Q2：如何魔改？</p><p>A2：从算法精髓入手。</p><h3 id="二、代码片段"><a href="#二、代码片段" class="headerlink" title="二、代码片段"></a>二、代码片段</h3><p>设 $distance[i][j]$ 为从点 $i$ 到点 $j$ 的距离。</p><p>Floyd 算法的精髓，就是<del>暴力</del>枚举一个点 $k$，如果发现 $distance[i][j] &lt; distance[i][k] + distance[k][j]$，那么就把 $distance[i][j]$ 更新为$distance[i][k] + distance[k][j]$。</p><p>发现端倪了吗？</p><p>求最长路，就是把上面的思路稍微改一改：如果发现 $distance[i][j] &gt; distance[i][k] + distance[k][j]$，那么就把 $distance[i][j]$ 更新为$distance[i][k] + distance[k][j]$。</p><p>因此我们得出了核心代码。</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> k<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>k<span class="token operator">&lt;=</span>n<span class="token punctuation">;</span>k<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>i<span class="token operator">&lt;=</span>n<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> j<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>j<span class="token operator">&lt;=</span>n<span class="token punctuation">;</span>j<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>distance<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token operator">=</span><span class="token function">max</span><span class="token punctuation">(</span>distance<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">,</span>distance<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token operator">+</span>distance<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>初始化部分也改一下：</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>i<span class="token operator">&lt;=</span>n<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> j<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>j<span class="token operator">&lt;=</span>n<span class="token punctuation">;</span>j<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>distance<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token operator">=</span><span class="token punctuation">(</span>i<span class="token operator">==</span>j<span class="token punctuation">)</span><span class="token operator">?</span><span class="token number">0</span><span class="token operator">:</span><span class="token operator">-</span><span class="token number">999999</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>Q3：第3行，当两点不存在路径时，距离为无限小。但是，为什么当 $i = j$ 时，距离为0而不是无限小呢？</p><p>A3：自行思考，文末会讲。</p><p>终于，我们得出了完整代码。</p><h3 id="三、完整代码"><a href="#三、完整代码" class="headerlink" title="三、完整代码"></a>三、完整代码</h3><p>还是那句话：道路千万条，诚信第一条。直接抄题解，棕名两行泪。</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;cstdio></span></span><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span><span class="token keyword">inline</span> <span class="token keyword">int</span> <span class="token function">max</span><span class="token punctuation">(</span><span class="token keyword">int</span> a<span class="token punctuation">,</span><span class="token keyword">int</span> b<span class="token punctuation">)</span><span class="token comment">//求两个数较大的那个。</span><span class="token punctuation">&#123;</span><span class="token keyword">return</span> a<span class="token operator">></span>b<span class="token operator">?</span>a<span class="token operator">:</span>b<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">int</span> t<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span><span class="token comment">//负责表示当前计算到第几组数据了。</span><span class="token keyword">while</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>t<span class="token operator">++</span><span class="token punctuation">;</span><span class="token comment">//负责表示当前计算到第几组数据了。</span><span class="token keyword">int</span> n<span class="token punctuation">,</span>start<span class="token punctuation">;</span><span class="token comment">//n代表点数，start代表起点。</span><span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%d"</span><span class="token punctuation">,</span><span class="token operator">&amp;</span>n<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//输入n。</span><span class="token keyword">if</span><span class="token punctuation">(</span>n<span class="token operator">==</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token comment">//如果n为0：</span><span class="token punctuation">&#123;</span><span class="token keyword">break</span><span class="token punctuation">;</span><span class="token comment">//退出。</span><span class="token punctuation">&#125;</span><span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%d"</span><span class="token punctuation">,</span><span class="token operator">&amp;</span>start<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//输入起点。</span><span class="token keyword">int</span> distance<span class="token punctuation">[</span><span class="token number">105</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">105</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token comment">//创建distance数组。</span><span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>i<span class="token operator">&lt;=</span>n<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> j<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>j<span class="token operator">&lt;=</span>n<span class="token punctuation">;</span>j<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>distance<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token operator">=</span><span class="token punctuation">(</span>i<span class="token operator">==</span>j<span class="token punctuation">)</span><span class="token operator">?</span><span class="token number">0</span><span class="token operator">:</span><span class="token operator">-</span><span class="token number">999999</span><span class="token punctuation">;</span><span class="token comment">//初始化，设distance[i][j]为无限小（i!=j）或0（i=j）。</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">while</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">int</span> a<span class="token punctuation">,</span>b<span class="token punctuation">;</span><span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%d%d"</span><span class="token punctuation">,</span><span class="token operator">&amp;</span>a<span class="token punctuation">,</span><span class="token operator">&amp;</span>b<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//输入一边的端点。</span><span class="token keyword">if</span><span class="token punctuation">(</span>a<span class="token operator">==</span><span class="token number">0</span><span class="token operator">&amp;&amp;</span>b<span class="token operator">==</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token comment">//当a和b均为0时：</span><span class="token punctuation">&#123;</span><span class="token keyword">break</span><span class="token punctuation">;</span><span class="token comment">//退出输入。</span><span class="token punctuation">&#125;</span>distance<span class="token punctuation">[</span>a<span class="token punctuation">]</span><span class="token punctuation">[</span>b<span class="token punctuation">]</span><span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span><span class="token comment">//这里的边权都是1。</span><span class="token punctuation">&#125;</span><span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> k<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>k<span class="token operator">&lt;=</span>n<span class="token punctuation">;</span>k<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>i<span class="token operator">&lt;=</span>n<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> j<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>j<span class="token operator">&lt;=</span>n<span class="token punctuation">;</span>j<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>distance<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token operator">=</span><span class="token function">max</span><span class="token punctuation">(</span>distance<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">,</span>distance<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token operator">+</span>distance<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//不断更新距离数组。</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token comment">//得出答案部分。</span><span class="token keyword">int</span> to<span class="token punctuation">,</span>dis<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span><span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>i<span class="token operator">&lt;=</span>n<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">if</span><span class="token punctuation">(</span>distance<span class="token punctuation">[</span>start<span class="token punctuation">]</span><span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">></span>dis<span class="token punctuation">)</span><span class="token comment">//打擂台。如果从起点到某一点的距离大于当前距离：</span><span class="token punctuation">&#123;</span>dis<span class="token operator">=</span>distance<span class="token punctuation">[</span>start<span class="token punctuation">]</span><span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token comment">//更新距离数据。</span>to<span class="token operator">=</span>i<span class="token punctuation">;</span><span class="token comment">//更新终点数据。</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"Case %d: The longest path from %d has length %d, finishing at %d.\n\n"</span><span class="token punctuation">,</span>t<span class="token punctuation">,</span>start<span class="token punctuation">,</span>dis<span class="token punctuation">,</span>to<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//输出。记得要2个换行！</span><span class="token punctuation">&#125;</span><span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="四、思考题答案"><a href="#四、思考题答案" class="headerlink" title="四、思考题答案"></a>四、思考题答案</h3><p>当 $i \ne j$ 时，起点和终点不同，所以在最初时距离自然是无限小。</p><p>但是，当 $i = j$ 时，起点和终点相同，相当于原地徘徊，距离就是0。</p><h3 id="五、后记"><a href="#五、后记" class="headerlink" title="五、后记"></a>五、后记</h3><p>记录：<a href="https://www.luogu.com.cn/record/51351320">https://www.luogu.com.cn/record/51351320</a>。</p><p>不同于<a href="https://www.luogu.com.cn/blog/387840/solution-uva10000">这篇题解</a>，他的题解采用了负数边权，根据不等式的性质，</p><p>$\because a &gt; b$</p><p>$\therefore -a &lt; -b$</p><p>于是，求最长路就巧妙地转换成了最短路，输出时对结果取相反数。</p><p>By <a href="https://www.luogu.com.cn/user/387836"><strong>dengzijun</strong></a></p>]]></content>
      
      
      <categories>
          
          <category> 洛谷题解 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Floyd算法 </tag>
            
            <tag> 图论 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>洛谷CF0934A题解</title>
      <link href="/2021-06-27-LuoguCF0934ATJ/"/>
      <url>/2021-06-27-LuoguCF0934ATJ/</url>
      
        <content type="html"><![CDATA[<h3 id="一、思路"><a href="#一、思路" class="headerlink" title="一、思路"></a>一、思路</h3><p>一看这数据范围，$2\le n,m\le50$，这完全可以使用暴力枚举。</p><p>再看这数据范围：</p><blockquote><p>数列中所有元素大小均在 $-10^9$ 到 $10^9$ 之间。</p></blockquote><p>这意味着什么？</p><p>当然是 <code>long long</code> 数据类型。</p><p>于是，我们就得到了完整代码。</p><h3 id="二、完整代码"><a href="#二、完整代码" class="headerlink" title="二、完整代码"></a>二、完整代码</h3><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;cstdio></span></span><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span><span class="token keyword">long</span> <span class="token keyword">long</span> finally_ans<span class="token operator">=</span><span class="token number">1e18</span><span class="token punctuation">;</span><span class="token comment">//最终答案。</span><span class="token keyword">long</span> <span class="token keyword">long</span> temp_ans<span class="token operator">=</span><span class="token operator">-</span><span class="token number">1e18</span><span class="token punctuation">;</span><span class="token comment">//循环一次的答案。</span><span class="token keyword">long</span> <span class="token keyword">long</span> input1<span class="token punctuation">[</span><span class="token number">51</span><span class="token punctuation">]</span><span class="token punctuation">,</span>input2<span class="token punctuation">[</span><span class="token number">51</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token comment">//输入的两个数列。</span><span class="token keyword">int</span> n<span class="token punctuation">,</span>m<span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%d%d"</span><span class="token punctuation">,</span><span class="token operator">&amp;</span>n<span class="token punctuation">,</span><span class="token operator">&amp;</span>m<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>i<span class="token operator">&lt;=</span>n<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%lld"</span><span class="token punctuation">,</span><span class="token operator">&amp;</span>input1<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>i<span class="token operator">&lt;=</span>m<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%lld"</span><span class="token punctuation">,</span><span class="token operator">&amp;</span>input2<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> del<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>del<span class="token operator">&lt;=</span>n<span class="token punctuation">;</span>del<span class="token operator">++</span><span class="token punctuation">)</span><span class="token comment">//枚举要删除的数。</span><span class="token punctuation">&#123;</span>temp_ans<span class="token operator">=</span><span class="token operator">-</span><span class="token number">1e18</span><span class="token punctuation">;</span><span class="token comment">//初始化。</span><span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>i<span class="token operator">&lt;=</span>n<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">if</span><span class="token punctuation">(</span>i<span class="token operator">==</span>del<span class="token punctuation">)</span><span class="token comment">//当前为要删除的数：</span><span class="token punctuation">&#123;</span><span class="token keyword">continue</span><span class="token punctuation">;</span><span class="token comment">//跳过。</span><span class="token punctuation">&#125;</span><span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> j<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>j<span class="token operator">&lt;=</span>m<span class="token punctuation">;</span>j<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">if</span><span class="token punctuation">(</span>input1<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">*</span>input2<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token operator">></span>temp_ans<span class="token punctuation">)</span><span class="token comment">//更新temp_ans。</span><span class="token punctuation">&#123;</span>temp_ans<span class="token operator">=</span>input1<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">*</span>input2<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">if</span><span class="token punctuation">(</span>temp_ans<span class="token operator">&lt;</span>finally_ans<span class="token punctuation">)</span><span class="token comment">//更新finally_ans。</span><span class="token punctuation">&#123;</span>finally_ans<span class="token operator">=</span>temp_ans<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%lld\n"</span><span class="token punctuation">,</span>finally_ans<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//输出。</span><span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token comment">//完结撒花！</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="三、后记"><a href="#三、后记" class="headerlink" title="三、后记"></a>三、后记</h3><p>记录：<a href="https://www.luogu.com.cn/record/51890174">https://www.luogu.com.cn/record/51890174</a>。</p><p>By <a href="https://www.luogu.com.cn/user/387836">dengzijun</a></p>]]></content>
      
      
      <categories>
          
          <category> 洛谷题解 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 暴力与模拟 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>洛谷CF0427A题解</title>
      <link href="/2021-06-27-LuoguCF0427ATJ/"/>
      <url>/2021-06-27-LuoguCF0427ATJ/</url>
      
        <content type="html"><![CDATA[<h3 id="一、题意简述"><a href="#一、题意简述" class="headerlink" title="一、题意简述"></a>一、题意简述</h3><p>其实这明明是一个警察与犯罪案件的题目，但题目翻译盖了个歪楼。</p><p>你有一个银行账户。现在银行账户里没有一分钱。</p><p>首先输入一个数 $n$，代表 $n$ 次操作。</p><p>接下来的一行有 $n$ 个数，第 $i$ 个数代表 $a_i$。</p><p>每个 $a_i$ 有两种可能：</p><ol><li><p>$a_i&gt;0$，此时往银行账户里充值 $a_i$ 元。</p></li><li><p>$a_i=-1$，此时银行账户扣 $1$ 元。如果银行账户根本没有钱扣除，那么透支金额加 $1$ 元。</p></li></ol><p>问：最后你透支了多少钱？</p><h3 id="二、思路"><a href="#二、思路" class="headerlink" title="二、思路"></a>二、思路</h3><p>模拟即可。</p><h3 id="三、完整代码"><a href="#三、完整代码" class="headerlink" title="三、完整代码"></a>三、完整代码</h3><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;cstdio></span></span><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span><span class="token keyword">int</span> n<span class="token punctuation">;</span><span class="token keyword">int</span> now_money<span class="token punctuation">,</span>ans<span class="token punctuation">;</span><span class="token comment">//now_money代表当前银行账户的存款，ans代表透支金额。</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%d"</span><span class="token punctuation">,</span><span class="token operator">&amp;</span>n<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>i<span class="token operator">&lt;=</span>n<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">int</span> input<span class="token punctuation">;</span><span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%d"</span><span class="token punctuation">,</span><span class="token operator">&amp;</span>input<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">if</span><span class="token punctuation">(</span>input<span class="token operator">></span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>now_money<span class="token operator">+=</span>input<span class="token punctuation">;</span><span class="token comment">//银行账户充值。</span><span class="token punctuation">&#125;</span><span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span>input<span class="token operator">==</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">if</span><span class="token punctuation">(</span>now_money<span class="token operator">></span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>now_money<span class="token operator">--</span><span class="token punctuation">;</span><span class="token comment">//银行账户扣款。</span><span class="token punctuation">&#125;</span><span class="token keyword">else</span><span class="token punctuation">&#123;</span>ans<span class="token operator">++</span><span class="token punctuation">;</span><span class="token comment">//透支金额加1。</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%d\n"</span><span class="token punctuation">,</span>ans<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//输出。</span><span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token comment">//完结撒花！</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="四、后记"><a href="#四、后记" class="headerlink" title="四、后记"></a>四、后记</h3><p>记录：<a href="https://www.luogu.com.cn/record/51668629">https://www.luogu.com.cn/record/51668629</a>。</p><p>By <a href="https://www.luogu.com.cn/user/387836">dengzijun</a></p>]]></content>
      
      
      <categories>
          
          <category> 洛谷题解 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 暴力与模拟 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>洛谷CF0934B题解</title>
      <link href="/2021-06-27-LuoguCF0934BTJ/"/>
      <url>/2021-06-27-LuoguCF0934BTJ/</url>
      
        <content type="html"><![CDATA[<h3 id="一、思路"><a href="#一、思路" class="headerlink" title="一、思路"></a>一、思路</h3><p>首先，本题中数字环最多的是 $8$，有 $2$ 个环。因此，在输出答案时，尽可能地使用 $8$。</p><p>如果 $k$ 可以被 $2$ 整除，那么输出 $k\div2$ 个 $8$。</p><p>如果不能，那么输出 $\left\lfloor k\div2\right\rfloor$ 个 $8$ 后，再输出一个 $4$。（不一定是 $4$，只要有且只有一个环就行。思考：$0$ 也有且只有一个环，那它行吗？）</p><p>注意，题目中要求答案不大 $10^{18}$，所以如果 $k&gt;36$，就说明至少输出 $19$ 个数字，超过了限制，所以直接输出 $-1$ 无解。</p><h3 id="二、完整代码"><a href="#二、完整代码" class="headerlink" title="二、完整代码"></a>二、完整代码</h3><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;cstdio></span></span><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">int</span> k<span class="token punctuation">;</span><span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%d"</span><span class="token punctuation">,</span><span class="token operator">&amp;</span>k<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">if</span><span class="token punctuation">(</span>k<span class="token operator">></span><span class="token number">36</span><span class="token punctuation">)</span><span class="token comment">//特判。</span><span class="token punctuation">&#123;</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"-1\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">if</span><span class="token punctuation">(</span>k<span class="token operator">%</span><span class="token number">2</span><span class="token operator">==</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token comment">//第一种情况。</span><span class="token punctuation">&#123;</span><span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>i<span class="token operator">&lt;=</span>k<span class="token operator">/</span><span class="token number">2</span><span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"8"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">else</span><span class="token comment">//第二种情况。</span><span class="token punctuation">&#123;</span><span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>i<span class="token operator">&lt;=</span>k<span class="token operator">/</span><span class="token number">2</span><span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"8"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"4\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token comment">//完结撒花！</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="三、思考题答案"><a href="#三、思考题答案" class="headerlink" title="三、思考题答案"></a>三、思考题答案</h3><p>当然不行。</p><p>当 $k=1$ 时，将只输出 $0$。但是，题目要求<strong>正整数</strong>，而 $0$ 不是正数，所以不行。</p><h3 id="四、后记"><a href="#四、后记" class="headerlink" title="四、后记"></a>四、后记</h3><p>记录：<a href="https://www.luogu.com.cn/record/51667794">https://www.luogu.com.cn/record/51667794</a>。</p><p>By <a href="https://www.luogu.com.cn/user/387836">dengzijun</a></p>]]></content>
      
      
      <categories>
          
          <category> 洛谷题解 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 数学知识 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>洛谷P7593题解</title>
      <link href="/2021-06-27-LuoguP7593TJ/"/>
      <url>/2021-06-27-LuoguP7593TJ/</url>
      
        <content type="html"><![CDATA[<p>这道题有点难。</p><p>首先，假设 $n=5$， $k=2$ ，此时 $s$ 可以从 $3$ 到 $9$ ，其它则不行。</p><p>设 $a$ 为数组 $1$ 到 $n$ 的前 $k$ 个数之和， $b$ 为数组 $1$ 到 $n$ 的后 $k$ 个数之和。</p><p>可以发现， $s$ 的范围就是从 $a$ 到 $b$ 。</p><p>发现这个规律，时空复杂度极小的代码应声而出。<br><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;cstdio></span></span><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">int</span> <span class="token expression"><span class="token keyword">long</span> <span class="token keyword">long</span></span><span class="token comment">//一劳永逸</span></span><span class="token keyword">int</span> T<span class="token punctuation">;</span><span class="token keyword">int</span> n<span class="token punctuation">,</span>k<span class="token punctuation">;</span><span class="token keyword">int</span> s<span class="token punctuation">;</span><span class="token keyword">signed</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%lld"</span><span class="token punctuation">,</span><span class="token operator">&amp;</span>T<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> t<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>t<span class="token operator">&lt;=</span>T<span class="token punctuation">;</span>t<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%lld%lld%lld"</span><span class="token punctuation">,</span><span class="token operator">&amp;</span>n<span class="token punctuation">,</span><span class="token operator">&amp;</span>k<span class="token punctuation">,</span><span class="token operator">&amp;</span>s<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//输入</span><span class="token keyword">if</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token operator">+</span>k<span class="token punctuation">)</span><span class="token operator">*</span>k<span class="token operator">/</span><span class="token number">2</span><span class="token operator">&lt;=</span>s<span class="token comment">/*计算a的值*/</span><span class="token operator">&amp;&amp;</span><span class="token punctuation">(</span><span class="token punctuation">(</span>n<span class="token operator">-</span>k<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token operator">+</span>n<span class="token punctuation">)</span><span class="token operator">*</span>k<span class="token operator">/</span><span class="token number">2</span><span class="token operator">>=</span>s<span class="token comment">/*计算b的值*/</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"Yes\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">else</span><span class="token punctuation">&#123;</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"No\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><br>还是那句话，十年OI一场空，不开long long见祖宗。</p>]]></content>
      
      
      <categories>
          
          <category> 洛谷题解 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 数学知识 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>洛谷P7566题解</title>
      <link href="/2021-06-27-LuoguP7566TJ/"/>
      <url>/2021-06-27-LuoguP7566TJ/</url>
      
        <content type="html"><![CDATA[<p>我相信各位看到这道题，第一时间想到的就是暴力求解。其实这没有必要，可以先算出“M”“C”“O”“I”在兔子名字开头的次数，然后做小学奥数即可。</p><p>吃兔子有4种可能的方案。</p><div class="table-container"><table><thead><tr><th style="text-align:left">编号</th><th style="text-align:left">具体内容</th></tr></thead><tbody><tr><td style="text-align:left">1</td><td style="text-align:left">吃MCO</td></tr><tr><td style="text-align:left">2</td><td style="text-align:left">吃ICO</td></tr><tr><td style="text-align:left">3</td><td style="text-align:left">吃MCI</td></tr><tr><td style="text-align:left">4</td><td style="text-align:left">吃MIO</td></tr></tbody></table></div><p>每一个方案的方案数都可以表示为对应的兔子名字首字母之积，再把这些积加起来即可。</p><p>废话少说，上代码！<br><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;cstdio></span></span><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span><span class="token keyword">int</span> n<span class="token punctuation">;</span><span class="token keyword">long</span> <span class="token keyword">long</span> rabbit_capital<span class="token punctuation">[</span><span class="token number">26</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token comment">//统计首字母出现次数的数组。</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%d"</span><span class="token punctuation">,</span><span class="token operator">&amp;</span>n<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>i<span class="token operator">&lt;=</span>n<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">char</span> temp<span class="token punctuation">[</span><span class="token number">12</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%s"</span><span class="token punctuation">,</span><span class="token operator">&amp;</span>temp<span class="token punctuation">)</span><span class="token punctuation">;</span>rabbit_capital<span class="token punctuation">[</span>temp<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token operator">-</span><span class="token string">'A'</span><span class="token punctuation">]</span><span class="token operator">++</span><span class="token punctuation">;</span><span class="token comment">//统计首字母出现次数。</span><span class="token punctuation">&#125;</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%lld\n"</span><span class="token punctuation">,</span>rabbit_capital<span class="token punctuation">[</span><span class="token string">'M'</span><span class="token operator">-</span><span class="token string">'A'</span><span class="token punctuation">]</span><span class="token operator">*</span>rabbit_capital<span class="token punctuation">[</span><span class="token string">'C'</span><span class="token operator">-</span><span class="token string">'A'</span><span class="token punctuation">]</span><span class="token operator">*</span>rabbit_capital<span class="token punctuation">[</span><span class="token string">'O'</span><span class="token operator">-</span><span class="token string">'A'</span><span class="token punctuation">]</span><span class="token operator">+</span>rabbit_capital<span class="token punctuation">[</span><span class="token string">'I'</span><span class="token operator">-</span><span class="token string">'A'</span><span class="token punctuation">]</span><span class="token operator">*</span>rabbit_capital<span class="token punctuation">[</span><span class="token string">'C'</span><span class="token operator">-</span><span class="token string">'A'</span><span class="token punctuation">]</span><span class="token operator">*</span>rabbit_capital<span class="token punctuation">[</span><span class="token string">'O'</span><span class="token operator">-</span><span class="token string">'A'</span><span class="token punctuation">]</span><span class="token operator">+</span>rabbit_capital<span class="token punctuation">[</span><span class="token string">'M'</span><span class="token operator">-</span><span class="token string">'A'</span><span class="token punctuation">]</span><span class="token operator">*</span>rabbit_capital<span class="token punctuation">[</span><span class="token string">'C'</span><span class="token operator">-</span><span class="token string">'A'</span><span class="token punctuation">]</span><span class="token operator">*</span>rabbit_capital<span class="token punctuation">[</span><span class="token string">'I'</span><span class="token operator">-</span><span class="token string">'A'</span><span class="token punctuation">]</span><span class="token operator">+</span>rabbit_capital<span class="token punctuation">[</span><span class="token string">'M'</span><span class="token operator">-</span><span class="token string">'A'</span><span class="token punctuation">]</span><span class="token operator">*</span>rabbit_capital<span class="token punctuation">[</span><span class="token string">'I'</span><span class="token operator">-</span><span class="token string">'A'</span><span class="token punctuation">]</span><span class="token operator">*</span>rabbit_capital<span class="token punctuation">[</span><span class="token string">'O'</span><span class="token operator">-</span><span class="token string">'A'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//输出</span><span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><br>注意，一定要开long long！正如一句话所说，十年OI一场空，不开long long见祖宗。</p>]]></content>
      
      
      <categories>
          
          <category> 洛谷题解 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 数学知识 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hello World</title>
      <link href="/2021-06-27-hello-world/"/>
      <url>/2021-06-27-hello-world/</url>
      
        <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ hexo new <span class="token string">"My New Post"</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ hexo server<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ hexo generate<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ hexo deploy<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
      
      
      
    </entry>
    
    
  
  
</search>
