<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>cyrxdzj的文化课学习笔记 数学004 函数</title>
      <link href="/2023-10-09-CyrxNote-Math-004/"/>
      <url>/2023-10-09-CyrxNote-Math-004/</url>
      
        <content type="html"><![CDATA[<p>本文含有较多图片，单击可以放大。</p><h3 id="1、思维杂题"><a href="#1、思维杂题" class="headerlink" title="1、思维杂题"></a>1、思维杂题</h3><p>已知 $A=B=${$0,1,2,3$}，则 $f:A\rightarrow B$ 有多少种值域？</p><p>可以发现，值域一定是集合 $B$ 的子集，同时值域不能为空集。而一个集合的非空子集的数量是 $2^n-1$ 个，所以值域有 $15$ 种。</p><p>若两个函数的对应关系相同，值域也相同，但定义域不同，则称这两个函数为“同族函数”。那么，函数 $y=x^2,x\in${$-1,0,1,2$}  有多少个同族函数？</p><p>可以很容易地得到，该函数的值域为 {$0,1,4$}，由此可知定义域符合如下性质：</p><ol><li>$0$ 必须出现；</li><li>$\pm1$ 至少出现一个，也可以都出现，共 $3$ 种可能；</li><li>$\pm2$ 同上；</li><li>其它数均不能出现。</li></ol><p>综上，相同的值域，定义域有 $9$ 种可能。</p><p>但是题中要求定义域<strong>不同</strong>，而上面 $9$ 种定义域有一种其实就是题中提到的。因此，答案为 $8$。</p><p>已知函数 $f(x)$ 的定义域为 {$1,2,3,4$}，值域为 {$7,8,9$}，且对任意的 $x&lt;y$ 都有 $f(x)\le f(y)$，则满足条件的不同函数共有多少个？</p><p>值域中每一个数，都至少有一个定义域中的数与之对应；而定义域中的每一个数，都恰好对应一个值域中的数。分析题目，题中要求定义域中有 $4$ 个数，可值域只有 $3$ 个数，换句话说，恰好有 $2$ 个定义域的数，对应的值域中的数，是同一个。</p><p>而题中还说 $x&lt;y,f(x)\le f(y)$，结合上文，我们可以列出不等式：</p><p>$f(1)\le f(2)\le f(3)\le f(4)$</p><p>这个式子中的 $3$ 个不等号有且只有 $1$ 个实际上是取等号的。如果有大于 $1$ 个不等号实际上取等号，就会导致函数可能的值的数量小于 $3$，值域中有数找不到定义域中的数与之对应；而如果没有不等号实际上取等号，就会导致 $4$ 个 $x$ 产生了 $4$ 个 $f(x)$，可值域的大小才 $3$ 个。</p><p>而任何一个不等号实际上取了等号，我们都能构造出对应关系。</p><p>因此，满足条件的不同函数，有 $3$ 个。</p><h3 id="2、与一元二次函数结合起来"><a href="#2、与一元二次函数结合起来" class="headerlink" title="2、与一元二次函数结合起来"></a>2、与一元二次函数结合起来</h3><p><a href="/2023-10-04-CyrxNote-Math-003/#toc-heading-8">前置知识</a></p><p>已知函数 $f(x)=x^2-4x$ 在 $[0,m]$ 上的值域为 $[-4,0]$，则实数 $m$ 的取值范围是？</p><p>首先，通过图象，我们可以看出 $x^2-4x$ 的情况：</p><p><img src="../post_image/CyrxNote-Math-004/CyrxNote-Math-004-01.PNG" alt=""></p><p>可以计算得出，当 $x=0$ 时，函数值为 $0$。当 $x=2$ 时，函数值取到最小值，为 $-4$。当 $x=4$ 时，函数值再次为 $0$。</p><p>因此，可以得出 $2\le m\le4$。如果 $m$ 太小，函数值就不够小；如果 $m$ 太大，函数值就会超过 $0$。</p><h3 id="3、当给出的函数不标准的时候"><a href="#3、当给出的函数不标准的时候" class="headerlink" title="3、当给出的函数不标准的时候"></a>3、当给出的函数不标准的时候</h3><p>有些问题给出的函数，不会给 $f(x)$ 这种标准的形式，而是各种各样乱七八糟的形式。</p><p>已知 $f(2x-1)=4x^2$，则下列结论中正确的是：</p><p>A. $f(3)=-9$</p><p>B. $f(-3)=-4$</p><p>C. $f(x)=x^2$</p><p>D. $f(x)=(x+1)^2$</p><p>对于这类问题，首先为了避免混淆，先将题干中给出的函数变量改个名字，变成 $f(2a-1)=4a^2$。</p><p>然后，对于每个选项，挨个儿解出函数括号内的数对应的 $a$ 是多少。</p><p>例如，A 选项，我们可得 $2a-1=3$，解得 $a=2,4a^2=16\neq-9$。A 选项错误。</p><p>B 选项，我们可得 $2a-1=-3$，解得 $a=-1,4a^2=4\neq-4$，B 选项错误。</p><p>C 和 D 选项，我们可得 $2a-1=x$，稍稍细心计算，得 $a=\frac{x+1}{2}$，由此可得 $4a^2=(x+1)^2$，D 选项正确而 C 选项错误。</p><p>对于此类问题，应将题干中给出的原函数传入的参数（即 $2a-1$）和选项中给出的待验证函数传入的参数（即 $3$、$-3$、$x$）进行比对，要求两者相等，得出原函数传入的参数中的字母具体是什么（即，当 $2a-1=3$ 时 $a=2$），然后将字母代入计算。为避免混淆，可以将原函数中的字母统一更名。</p><p>需要注意的是，有些时候以上方法并不适用，例如：</p><p>已知 $f(x-\frac{1}{x})=x^2+\frac{1}{x^2}$，求 $f(x)$。</p><p>对于这道题，我们可以使用初中时学过的完全平方公式，发现 $x^2+\frac{1}{x^2}=(x-\frac1x)^2+2$，而 $f(x-\frac1x)=(x-\frac1x)^2+2$ 意味着 $f(x)=x^2+2$。</p><p>对于这种情况，可以尝试推出函数参数与函数表达式之间的关系，具体情况具体分析。</p><h3 id="4、仔细分析更复杂的函数"><a href="#4、仔细分析更复杂的函数" class="headerlink" title="4、仔细分析更复杂的函数"></a>4、仔细分析更复杂的函数</h3><p>设 $f(x)=\frac{1+x^2}{1-x^2}$，则下列结论正确的是？请注意本题多选。</p><p>A. $f(-x)=-f(x)$</p><p>B. $f(\frac{1}{x})=-f(x)$</p><p>C. $f(-\frac{1}{x})=f(x)$</p><p>D. $f(-x)=f(x)$</p><p>我们可以发现，$x^2=(-x)^2$，$x$ 的正负性并不影响平方的结果。因此，$\frac{1+x^2}{1-x^2}=\frac{1+(-x)^2}{1-(-x)^2}$，由此可得 $f(-x)=f(x)$，A 选项错误，D 选项正确。</p><p>顺便说一句，这样的函数叫做<strong>偶函数</strong>，函数关于 $y$ 轴<strong>对称</strong>，图象如下：</p><p><img src="../post_image/CyrxNote-Math-004/CyrxNote-Math-004-02.PNG" alt=""></p><p>同时，我们可以得到 $f(\frac{1}{x})=f(-\frac{1}{x})$，这一条待会有用。</p><p>接下来，细心推出以下式子：</p><p>$f(\frac{1}{x})\\=\frac{1+\frac{1}{x}^2}{1-\frac{1}{x}^2}\\=\frac{x^2+1}{x^2}\div\frac{x^2-1}{x^2}\\=\frac{1+x^2}{x^2-1}$</p><p>至此，函数 $f(\frac{1}{x})$ 计算完毕。</p><p>而函数 $f(x)=\frac{1+x^2}{1-x^2}$，可以很容易地发现 $f(\frac{1}{x})=-f(x)$，B 选项正确，C 选项错误。图象如下：</p><p><img src="../post_image/CyrxNote-Math-004/CyrxNote-Math-004-03.PNG" alt=""></p><p>可以恰好发现 $f(x)$ 与 $f(\frac{1}{x})$ 关于 $x$ 轴对称。</p><p>对于此类问题，应细心审题，谨慎作答，答后验证。</p><h3 id="5、分段函数之对齐分段"><a href="#5、分段函数之对齐分段" class="headerlink" title="5、分段函数之对齐分段"></a>5、分段函数之对齐分段</h3><p>试画出函数 $f(x)=x|x|$ 的大致图象。</p><p>我们知道，绝对值本质上也是一个分段函数，可以表示为 $f(x)=\left\lbrace\begin{matrix}x,&amp;x\ge0,\\-x,&amp;x&lt;0,\end{matrix}\right.$。</p><p>其实，任何一个函数，都一定可以转换成分段函数，分多少段、每一段的范围和解析式是什么，<del>随你喜欢</del>可以按照题目要求来。比如，$f(x)=x$ 也可表示为 $f(x)=\left\lbrace\begin{matrix}x,&amp;x\ge0,\\x,&amp;x&lt;0,\end{matrix}\right.$。</p><p>这样，我们便可以列出下表：</p><div class="table-container"><table><thead><tr><th>$f(x)=x$</th><th>$f(x)=\vert x\vert$</th><th>$f(x)=x\vert x\vert$</th><th>达成条件</th></tr></thead><tbody><tr><td>$x$</td><td>$x$</td><td>$x^2$</td><td>$x\ge0$</td></tr><tr><td>$x$</td><td>$-x$</td><td>$-x^2$</td><td>$x&lt;0$</td></tr></tbody></table></div><p>可以发现，当 $x\ge0$ 时，函数为开口向上的对称轴为 $x=0$ 一元二次函数的一部分；当 $x&lt;0$ 时，函数为开口向下的对称轴为 $x=0$ 一元二次函数的一部分。图象为：</p><p><img src="../post_image/CyrxNote-Math-004/CyrxNote-Math-004-04.PNG" alt=""></p><p>对于这类题目，应将函数整个式子分离成多个分段函数（<strong>分离函数</strong>），对于每个分段函数，继续细分分段（即使这会导致有些分段解析式相同）（<strong>对齐分段</strong>），列出表格，再将多个函数通过一些运算符号拼在一起（<strong>合并函数</strong>），再根据分段条件和合并后的解析式特点画出函数图象。</p><p>再看看更简单的。定义符号函数 $sgn\space x=\left\lbrace\begin{matrix}1,&amp;x&gt;0,\\0,&amp;x=0,\\-1,&amp;x&lt;0,\end{matrix}\right.$，试画出 $f(x)=|x|sgn\space x$ 的大致图像。</p><p>老方法，分离函数，对齐分段，得出下表：</p><div class="table-container"><table><thead><tr><th>$f(x)=\vert x\vert$</th><th>$f(x)=sgn\space x$</th><th>$f(x)=\vert x\vert sgn\space x$</th><th>达成条件</th></tr></thead><tbody><tr><td>$x$</td><td>$1$</td><td>$x$</td><td>$x&gt;0$</td></tr><tr><td>$0$</td><td>$0$</td><td>$0$</td><td>$x=0$</td></tr><tr><td>$-x$</td><td>$-1$</td><td>$x$</td><td>$x&lt;0$</td></tr></tbody></table></div><p>我们可以发现函数完完全全就是 $f(x)=x$ 诶。函数图象如下：</p><p><img src="../post_image/CyrxNote-Math-004/CyrxNote-Math-004-05.PNG" alt=""></p><p>上图中，红色线和绿色线是拆分后的函数，紫色线是合并后要求的函数。函数与颜色的对应关系在左边有写。</p><h3 id="5、找规律"><a href="#5、找规律" class="headerlink" title="5、找规律"></a>5、找规律</h3><p>已知分段函数 $f(x)=\left\lbrace\begin{matrix}x^2,  &amp;x&lt;1, \\f(x-1)-1,  &amp;x\ge1,\end{matrix}\right.$，求以下函数的值：</p><ol><li><p>$f(2)$</p></li><li><p>$f(2023)$</p></li><li><p>$f(2023.6)$</p></li><li><p>$f(-0.6)$</p></li></ol><p>对于第 1 题，可以爆算，$f(2)=f(1)-1=f(0)-1-1=0^2-1-1=-2$。</p><p>对于第 2 题，显然不能爆算了，但是我们可以根据上一题找到规律，可以发现 $f(2023)=f(2022)-1=f(2021)-1-1=\dots =f(0)-2023\times1=-2023$，每计算一层，$f$ 中的参数都会减 $1$，同时式子后面就会多个 $-1$。</p><p>对于第 3 题，可以发现 $f(2023.6)=f(2022.6)-1=f(2021.6)-1-1=\dots =f(0.6)-2023\times1=0.6^2-2023=-2022.64$。有点难，但细心分析应该不会有太大问题。</p><p>对于第 4 题，一上来就有 $x&lt;1$，所以 $f(-0.6)=(-0.6)^2=0.36$。</p><p>经计算机验证，这是正确的：</p><p><img src="../post_image/CyrxNote-Math-004/CyrxNote-Math-004-06.PNG" alt=""></p><p>当然考试时没有计算机的。</p><p>对于这类问题，可以稍微爆算几轮，发现规律，同时根据函数解析式验证规律。</p>]]></content>
      
      
      <categories>
          
          <category> cyrxdzj的文化课学习笔记 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>cyrxdzj的文化课学习笔记 数学003 一元二次不等式</title>
      <link href="/2023-10-04-CyrxNote-Math-003/"/>
      <url>/2023-10-04-CyrxNote-Math-003/</url>
      
        <content type="html"><![CDATA[<p>本文含有较多图片，单击可以放大。</p><h3 id="1、基础：一元二次不等式的基本解法"><a href="#1、基础：一元二次不等式的基本解法" class="headerlink" title="1、基础：一元二次不等式的基本解法"></a>1、基础：一元二次不等式的基本解法</h3><p>一元二次不等式的左边是一个一元二次函数，中间是一个不等号，右边一般为 $0$。如果不是，则考虑移项。</p><p>例题：$(x+5)(3-2x)\ge6$。</p><p>首先，将左边去括号，得到 $-2x^2-7x+15$。</p><p>然后，移项，得到 $-2x^2-7x+9\ge0$。</p><p>然后，将不等式的左边部分进行因式分解，得到 $(-2x-9)(x-1)\ge0$。</p><p>根据初中时期的知识，我们可以知道当 $x=-\frac{9}{2}$ 或 $x=1$ 时，式子等于 $0$。而 $(-2x-9)(x-1)$ 应该是开口向<strong>下</strong>的一元二次函数。因此，我们可以得到 $-\frac{9}{2}\le x\le1$。</p><p>因此，我们可以得到如下的基本步骤：</p><ol><li>将整个不等式尝试化成左边一个一元二次函数、右边一个 $0$ 的形式，其中的一元二次函数应使用因式分解，化成 $(ax+b)(cx+d)$ 的形式。因式分解的难度随出题老师的变态程度的提升而提升。并且因式分解中还可能包含更多字母，这就需要经验了。</li><li>计算当 $x=?$ 时，一元二次函数的值为 $0$。这个 $x$ 我们一般称之为<strong>零点</strong>。零点不是点，而是一个数，当自变量 $x$ 的值为这个数时，函数值为 $0$。</li><li>判断函数的开口方向。当开口方向向上且不等号为小于（等于）时，或者开口方向向下且不等号为大于（等于）时，不等式的解集在两个零点之间（<strong>需要考虑能否取等号</strong>）。否则，不等式的解集在两个零点的两边。</li></ol><p>如下图：</p><p><img src="../post_image/CyrxNote-Math-003/CyrxNote-Math-003-02.PNG" alt=""></p><p>被加粗的点即为函数取值为 $0$ 的点。</p><h3 id="2、分类讨论"><a href="#2、分类讨论" class="headerlink" title="2、分类讨论"></a>2、分类讨论</h3><p>当 $a\in R$ 时，求 $x^2-(a+1)x+a&lt;0$ 的解集。</p><p>首先，凭经验进行因式分解，我们可以发现 $x^2-(a+1)x+a=(x-a)(x-1)$。这样，我们就可以很容易地求出函数零点为 $a$ 和 $1$，不等式解集应该在零点之间，且不能取等号。</p><p>那么，我们就可以根据 $a$ 和 $1$ 的大小关系分类讨论了。</p><p>当 $a&lt;1$ 时，$a&lt;x&lt;1$。</p><p><img src="../post_image/CyrxNote-Math-003/CyrxNote-Math-003-03.PNG" alt=""></p><p>当 $a=1$ 时，可以发现原不等式无解。</p><p>当 $a&gt;1$ 时，可以发现 $1&lt;x&lt;a$。</p><p>有些时候，丧心病狂的出题人会搞点花活。比如说，把字母放在二次项前面。在做这类题目时，一定要注意一元二次不等式会不会退化成一元一次不等式，并分类讨论。</p><p>比如，求 $mx^2-(m+2)x+2\le0$ 的解集。</p><p>根据因式分解可以得到，原不等式等价于 $(mx-2)(x-1)\le0$。</p><p>但是，我们可以发现，当 $m=0$ 时，原不等式会退化成一元一次不等式，得 $-2x+2\le0$。这个一元一次不等式倒也不难，可以解得 $x\ge1$。</p><p><img src="../post_image/CyrxNote-Math-003/CyrxNote-Math-003-04.PNG" alt=""></p><p>当 $m\neq0$ 时，可以发现函数的零点是 $1$ 和 $\frac{2}{m}$。</p><p>但是，$m$ 的变化还会影响到函数的形状是开口向上还是向下。因此，需要更复杂的分类讨论。</p><p>当 $m&lt;0$ 时，当然有 $\frac{2}{m}&lt;1$。此时函数开口向下，那么解集就是零点的两边，也就是 $x\le\frac{2}{m}$ 或 $x\ge1$。</p><p><img src="../post_image/CyrxNote-Math-003/CyrxNote-Math-003-05.PNG" alt=""></p><p>当 $0 &lt; m &lt; 2$ 时，还有 $\frac{2}{m}&gt;1$。此时函数开口向上，那么解集就是零点之间，也就是 $1\le x\le\frac{2}{m}$。</p><p><img src="../post_image/CyrxNote-Math-003/CyrxNote-Math-003-06.PNG" alt=""></p><p>当 $m=2$ 时，$\frac{2}{m}=1$。由于原不等式允许取等号，所以 $x=1$。</p><p><img src="../post_image/CyrxNote-Math-003/CyrxNote-Math-003-07.PNG" alt=""></p><p>当 $m&gt;2$ 时，$\frac{2}{m}&lt;1$。此时解集为 $\frac{2}{m}\le x\le1$。</p><p><img src="../post_image/CyrxNote-Math-003/CyrxNote-Math-003-08.PNG" alt=""></p><p>一个看似简单的不等式，分了 5 类作答……在数学中养成细心审题、全面考虑的习惯还是很重要的。</p><h3 id="3、一元一次不等式与一元二次不等式的分类讨论结合"><a href="#3、一元一次不等式与一元二次不等式的分类讨论结合" class="headerlink" title="3、一元一次不等式与一元二次不等式的分类讨论结合"></a>3、一元一次不等式与一元二次不等式的分类讨论结合</h3><p>若关于 $x$ 的不等式 $ax-b\le0$ 的解集为 {$x|x\ge2$}，则关于 $x$ 的不等式 $ax^2+(3a-b)x-3b&lt;0$ 的解集是？</p><p>根据这个一元一次不等式的解集，我们可以发现，$ax-b$ 的值随 $x$ 的升高而<strong>降低</strong>。换句话说，$a&lt;0$。</p><p>因此，可以解得 $x\ge\frac{b}{a}$。</p><p>这样我们就可以发现 $\frac{b}{a}=2,a&lt;0,b&lt;0$。</p><p>再看看这个一元二次不等式，可以发现 $ax^2+(3a-b)x-3b=(ax-b)(x+3)$，也就是函数的零点在 $-3$ 和 $\frac{b}{a}=2$ 上。</p><p>因为 $a<0$，我们可以发现一元二次函数开口向下，最终解得 $x<-3$ 或 $x>2$。</p><h3 id="4、分数与不等式，如何转化为一元二次不等式"><a href="#4、分数与不等式，如何转化为一元二次不等式" class="headerlink" title="4、分数与不等式，如何转化为一元二次不等式"></a>4、分数与不等式，如何转化为一元二次不等式</h3><p>一个要点：当 $a$ 和 $b$ 都为实数且 $b\neq0$ 时，$\frac{a}{b}&gt;0$ 等价于 $ab&gt;0$，将不等号换成大于、大于等于、小于、小于等于都成立。证明如下：</p><p>我们都知道，一个实数的平方一定是一个非负数。而 $b\neq0$，这也意味着 $b^2&gt;0$。</p><p>如果不等式左右两边同时乘 $b^2$，由于 $b^2&gt;0$，所以不等号无需改变。而 $0$ 乘任何数都得 $0$，原不等式就被化成了 $ab&gt;0$。证毕。</p><h3 id="5、-Delta-的出场"><a href="#5、-Delta-的出场" class="headerlink" title="5、$\Delta$ 的出场"></a>5、$\Delta$ 的出场</h3><p>有些时候，一元二次不等式问题需要用到初中时学习到的“根的判别式 $\Delta$”。</p><p>若 $-x^2+mx-1\ge0$ 有解，则实数 $m$ 的取值范围？</p><p>首先，不等号左边的一元二次函数开口向下。</p><p>然后，不等式要求函数存在 $x$ 轴的上方（或恰好在 $x$ 轴上）的部分。</p><p>因此，可以得知 $-x^2+mx-1=0$ 应该有解，两个实数解可以相同。换言之，$\Delta=m^2-4\times(-1)\times(-1)\ge0$，再根据一元二次方程的解法解出来即可。</p><p>再看看这个。若 $x^2+ax+4&lt;0$ 解集为空，则 $a$ 的取值范围？</p><p>首先，不等号左边的一元二次函数，开口向上。</p><p>然后，没有部分在 $x$ 轴的下方。换句话说，$x^2+ax+4\ge0$ 对所有实数 $x$ 成立。</p><p>那么，一元二次方程 $x^2+ax+4=0$ 应该无实数解或两个实数解相同。即，$\Delta=a^2-4\times1\times4\le0$。再根据一元二次方程的解法解出来即可。</p><h3 id="6、一元二次函数与它的最值"><a href="#6、一元二次函数与它的最值" class="headerlink" title="6、一元二次函数与它的最值"></a>6、一元二次函数与它的最值</h3><p><a id="ref-point-01" style="display:block;height:0px;"></a></p><p>已知关于 $x$ 的不等式 $-x^2+4x\ge a^2-3a$ 在 $R$ 上有解，则 $a$ 的取值范围是？</p><p>首先，可以发现 $-x^2+4x$ 的最大值为 $4$，这应该不难求出。</p><p>若 $a&gt;b$ 恒成立，则 $a$ 的值必须大于 $b$ 可能达到的最大值。若 $a&lt;b$ 恒成立，则 $a$ 的值必须小于 $b$​ 可能达到的最小值。 </p><p>若 $a\ge b$ 恒成立，则 $a$ 的值必须大于等于 $b$ 可能达到的最大值。若 $a\le b$ 恒成立，则 $a$ 的值必须小于等于 $b$ 可能达到的最小值。 </p><p>然后，我们可以把 $a^2-3a$ 想象成一条横在图像上的横线 $y=a^2-3a$，需要注意这里 $y$ 不随 $x$ 的变化而变化（而是随 $a$ 的变化而变化），所以是横线。</p><p><img src="../post_image/CyrxNote-Math-003/CyrxNote-Math-003-01.png" alt=""></p><p>那么，当 $a^2-3a&gt;4$ 时，不等式左边 $-x^2+4x$ 的最大值都达不到这个线。而当 $a^2-3a\le4$ 时，$-x^2+4x$ 就能有解了。</p><p>因此 $-1\le a\le4$。</p><h3 id="7、一元二次不等式恒成立的问题"><a href="#7、一元二次不等式恒成立的问题" class="headerlink" title="7、一元二次不等式恒成立的问题"></a>7、一元二次不等式恒成立的问题</h3><p>有些时候，题目会要求无论 $x$ 取任意实数，不等式均成立，要求求出另一个未知的字母的取值范围。</p><p>这种题目一般与 $\Delta$ 有所关联。</p><p>这里列出个表格，表示各种情况下恒成立的要求。</p><table>    <tr>        <th>函数开口方向</th>        <th>无论 $x$ 取何值，函数的值都要求</th>        <th>函数与 $x$ 轴的交点个数</th>        <th>$\Delta$ 的要求</th>    </tr>    <tr>        <td rowspan="4">向上</td>        <td>小于 $0$</td>        <td rowspan="2" colspan="2">不可能实现</td>    </tr>    <tr>        <td>小于等于 $0$</td>    </tr>    <tr>        <td>大于 $0$</td>        <td>$0$ 个</td>        <td>小于 $0$</td>    </tr>    <tr>        <td>大于等于 $0$</td>        <td>$0\sim1$ 个</td>        <td>小于等于 $0$</td>    </tr>    <tr>        <td rowspan="4">向下</td>        <td>小于 $0$</td>        <td>$0$ 个</td>        <td>小于 $0$</td>    </tr>    <tr>        <td>小于等于 $0$</td>        <td>$0\sim1$ 个</td>        <td>小于等于 $0$</td>    </tr>    <tr>        <td>大于 $0$</td>        <td rowspan="2" colspan="2">不可能实现</td>    </tr>    <tr>        <td>大于等于 $0$</td>    </tr></table><p>当然，上面要求的分类讨论，这里也不能少。</p><p>若不等式 $(a-3)x^2+2(a-2)x-4&lt;0$ 对于一切 $x\in R$ 恒成立，则 $a$ 的取值范围？</p><p>首先，先考虑当 $a-3=0$，一元二次函数退化成一元一次函数的情况。此时函数还是一元一次函数而不是连未知数 $x$ 都被消去的形式，而 $2x-4&lt;0$ 并不恒成立。</p><p>当 $a-3&gt;0$ 时，由上表可以发现这是不可能实现恒成立的。</p><p>当 $a-3&lt;0,a&lt;3$ 时，$\Delta&lt;0$，也就是说 $[2(a-2)]^2-4\times(a-3)\times(-4)&lt;0$，用一元二次不等式的解法可知 $-2\sqrt2&lt;a&lt;2\sqrt2$。</p><p>综上，$-2\sqrt2&lt;a&lt;2\sqrt2$。</p><p>再看看这个：$\frac{2x^2+2mx+m}{4x^2+6x+3}&lt;1$ 对所有实数 $x$ 恒成立，则实数 $m$ 的取值范围是？</p><p>首先，因为 $6^2-4\times4\times3=-12&lt;0$，可以知道 $4x^2+6x+3$ 始终大于 $0$。因此，可以放心地将分母移项到右边，再稍微整理一下，得 $0&lt;2x^2+(6-2m)x+(3-m)$。</p><p>结合上表，可知 $\Delta=(6-2m)^2-4\times2\times(3-m)=4m^2-24m+36-24+8m=4m^2-16m+12=4(m-1)(m-3)&lt;0$，解得 $1&lt;m&lt;3$。</p><h3 id="8、在限定-x-的取值范围的前提下，一元二次函数的最值"><a href="#8、在限定-x-的取值范围的前提下，一元二次函数的最值" class="headerlink" title="8、在限定 $x$ 的取值范围的前提下，一元二次函数的最值"></a>8、在限定 $x$ 的取值范围的前提下，一元二次函数的最值</h3><p>我们都知道，当 $x$ 的取值范围不限定时，一元二次函数要么只有最大值，要么只有最小值。但是限定了 $x$ 的取值范围后，一元二次函数就有可能同时拥有最小值和最大值了。</p><table>    <tr>        <th>函数开口方向</th>        <th>取值范围相对于对称轴</th>        <th>最大值位置</th>        <th>最小值位置</th>        <th>例图</th>    </tr>    <tr>        <td rowspan="3">向上</td>        <td>取值范围整体在对称轴左边</td>        <td>取值范围左端点</td>        <td>取值范围右端点</td>        <td rowspan="3"><img src="../post_image/CyrxNote-Math-003/CyrxNote-Math-003-09.PNG"></td>    </tr>    <tr>        <td>取值范围包含对称轴</td>        <td>离对称轴最远的地方</td>        <td>对称轴处</td>    </tr>    <tr>        <td>取值范围整体在对称轴右边</td>        <td>取值范围右端点</td>        <td>取值范围左端点</td>    </tr>    <tr>        <td rowspan="3">向下</td>        <td>取值范围整体在对称轴左边</td>        <td>取值范围右端点</td>        <td>取值范围左端点</td>        <td rowspan="3"><img src="../post_image/CyrxNote-Math-003/CyrxNote-Math-003-10.PNG"></td>    </tr>    <tr>        <td>取值范围包含对称轴</td>        <td>对称轴处</td>        <td>离对称轴最远的地方</td>    </tr>    <tr>        <td>取值范围整体在对称轴右边</td>        <td>取值范围左端点</td>        <td>取值范围右端点</td>    </tr></table><p>如果函数上某个点离最值点的水平距离（$|x_0-x_1|$）越大，那么垂直距离（$|y_0-y_1|$）也越大。</p><p>例题：$-1\le x\le2$ 时，$x^2-2x+a&lt;0$ 恒成立的必要不充分条件是？</p><p>A. $a&lt;-3$</p><p>B. $a&lt;-4$</p><p>C. $a&lt;0$</p><p>D. $a&gt;0$</p><p>首先，原不等式等价于 $x^2-2x&lt;-a$。</p><p>$x^2-2x$ 的对称轴是 $x=1$，最小值是 $-1$，最大值是当 $x=-1$ 时的 $3$。</p><blockquote><p>若 $a&gt;b$ 恒成立，则 $a$ 的值必须大于 $b$ 可能达到的最大值。若 $a&lt;b$ 恒成立，则 $a$ 的值必须小于 $b$​ 可能达到的最小值。 </p><p>若 $a\ge b$ 恒成立，则 $a$ 的值必须大于等于 $b$ 可能达到的最大值。若 $a\le b$ 恒成立，则 $a$ 的值必须小于等于 $b$ 可能达到的最小值。 </p></blockquote><p>因此，$-a&gt;3,a&lt;-3$。</p><p>但题目中要求的是必要不充分条件。关于这个，可以参考<a href="/2023-09-23-CyrxNote-Math-002/#toc-heading-1">这里</a>。</p><p>综上，此题选 $B$。</p><h3 id="9、尝试将其它字母分离出来"><a href="#9、尝试将其它字母分离出来" class="headerlink" title="9、尝试将其它字母分离出来"></a>9、尝试将其它字母分离出来</h3><p>恰好做了道比较有趣的题，记录一下。</p><p>若 $mx^2-mx-6+m&lt;0$ 在 $1\le m\le3$ 时均成立，则实数 $x$ 的取值范围？</p><p>需要注意的是，这次是已知 $m$ 求 $x$ 的范围，而不是已知 $x$ 求 $m$ 的范围。</p><p>首先，$mx^2-mx-6+m=m(x^2-x+1)-6$，原不等式等价于 $m(x^2-x+1)&lt;6$。</p><p>然后，$1\le m$ 说明 $m$ 是正数，那我们就可以放心地将 $m$ 移到右边而不用变不等号，得 $x^2-x+1&lt;\frac{6}{m}$。</p><p>可以发现，$\frac{6}{m}$ 应取最小值（<a onclick="javascript:window.location.href='#ref-point-01';">为什么？</a>），即 $m=3$ </p><p>由此，我们就得到了 $x^2-x+1&lt;0$，花点时间解一下，得 $\frac{1-\sqrt{5}}{2}&lt;x&lt;\frac{1+\sqrt{5}}{2}$。</p>]]></content>
      
      
      <categories>
          
          <category> cyrxdzj的文化课学习笔记 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>cyrxdzj的文化课学习笔记 化学001 氧化还原反应</title>
      <link href="/2023-09-28-CyrxNote-Chemistry-001/"/>
      <url>/2023-09-28-CyrxNote-Chemistry-001/</url>
      
        <content type="html"><![CDATA[<p>$\require{color}$</p><p>这玩意把人绕晕了都。</p><h3 id="1、是否为氧化还原反应的判定"><a href="#1、是否为氧化还原反应的判定" class="headerlink" title="1、是否为氧化还原反应的判定"></a>1、是否为氧化还原反应的判定</h3><ol><li><p>置换反应一定是，因为那个单质一定在反应过程中发生了化合价变化；</p></li><li><p>复分解反应一定<strong>不</strong>是，因为复分解反应中不会有化合价变化（这是初中知识）（此条存疑，详见<a href="https://baike.baidu.com/item/%E6%B0%A7%E5%8C%96%E8%BF%98%E5%8E%9F%E5%8F%8D%E5%BA%94/578183#8-4">百度百科-氧化还原反应-复分解反应</a>）；</p></li><li><p>分解反应和化合反应，看情况。</p></li></ol><h3 id="2、氧化与还原的判定"><a href="#2、氧化与还原的判定" class="headerlink" title="2、氧化与还原的判定"></a>2、氧化与还原的判定</h3><p>比如这个：</p><p>$\begin{matrix}<br>\textcolor{red}0 &amp; \textcolor{blue}0 &amp; 点燃 &amp; \textcolor{red}{+4}\textcolor{blue}{-2}\\<br>\textcolor{red}C &amp; +\textcolor{blue}O_2&amp;===&amp;\textcolor{red}{C}\textcolor{blue}{O}_2<br>\end{matrix}$</p><p>初中知识告诉我们，这是氧化反应。</p><p>再比如这个：</p><p>$\begin{matrix}<br>\textcolor{red}{+2}&amp;\textcolor{blue}0&amp;高温&amp;\textcolor{red}0&amp;\textcolor{blue}{+4}\\<br>2\textcolor{red}{Cu}O&amp;+\textcolor{blue}C&amp;===&amp;2\textcolor{red}{Cu}&amp;+\textcolor{blue}CO_2<br>\end{matrix}$</p><p>初中知识告诉我们，这是还原反应。</p><p>事实上，到了高中，这俩就合并成“氧化还原反应”了。</p><p>因此，对于第 1 个反应，我们可以发现：</p><div class="table-container"><table><thead><tr><th>元素</th><th>$C$</th><th>$O$</th></tr></thead><tbody><tr><td>化合价变化</td><td>升高</td><td>降低</td></tr><tr><td>电子</td><td>失去</td><td>得到</td></tr><tr><td>自己被？</td><td>氧化</td><td>还原</td></tr><tr><td>扮演的角色</td><td>还原剂</td><td>氧化剂</td></tr></tbody></table></div><p>对于第 2 个反应，我们可以发现：</p><div class="table-container"><table><thead><tr><th>元素</th><th>$C$</th><th>$Cu$</th></tr></thead><tbody><tr><td>化合价变化</td><td>升高</td><td>降低</td></tr><tr><td>电子</td><td>失去</td><td>得到</td></tr><tr><td>自己被？</td><td>氧化</td><td>还原</td></tr><tr><td>扮演的角色</td><td>还原剂</td><td>氧化剂</td></tr></tbody></table></div><p>总结：</p><ol><li><p>化合价升高的元素则为还原剂，自身被氧化；化合价降低的元素则为氧化剂，自身被还原；</p></li><li><p>有氧化，必有还原；有化合价升高，必有化合价降低；有电子失去，必有电子得到。</p></li></ol><p>或者说，氧化剂具有氧化性，在氧化别的元素的同时自己被还原；还原剂具有还原性，在还原别的元素的同时自己被氧化。</p><p><img src="https://pic4.zhimg.com/80/v2-39af08f1360472a5e9dd1922e4fed32b_720w.webp" alt=""></p><p>如果实在记不住，那就在考场上，在草稿纸上写一写吧。</p><h3 id="3、氧化剂、还原剂、氧化产物、还原产物"><a href="#3、氧化剂、还原剂、氧化产物、还原产物" class="headerlink" title="3、氧化剂、还原剂、氧化产物、还原产物"></a>3、氧化剂、还原剂、氧化产物、还原产物</h3><p>还是回到那个方程式：<br>$\begin{matrix}<br>\textcolor{red}{+2}&amp;\textcolor{blue}0&amp;高温&amp;\textcolor{red}0&amp;\textcolor{blue}{+4}\\<br>2\textcolor{red}{Cu}O&amp;+\textcolor{blue}C&amp;===&amp;2\textcolor{red}{Cu}&amp;+\textcolor{blue}CO_2<br>\end{matrix}$</p><p>作为氧化剂的元素或离子，经过还原反应后，会变成还原产物。</p><p>作为还原剂的元素或离子，经过氧化反应后，会变成氧化产物。</p><p><strong>部分物质同时具有氧化性和还原性。</strong></p><p>还原剂的还原性大于还原产物，氧化剂的氧化性大于氧化产物。</p><p><del>好绕啊……</del></p><p>好，来道题看看。</p><p>已知下列反应：$Cl_2+2NaBr===2NaCl+Br_2$，$2KI+Br_2===2KBr+I_2$，$Na_2S+I_2===2NaI+S\downarrow$。</p><p>则：</p><p>（1）$Cl^-$、$Br^-$、$I^-$、$S^{2-}$ 的还原性由强到弱排序？</p><p>（2）$Cl_2$、$Br_2$、$I_2$、$S$ 的氧化性由强到弱排序？</p><p>首先，给关键的元素或离子标上化合价。</p><p>然后，判断哪个是还原剂，哪个是氧化剂，哪个是还原产物，哪个是氧化产物。</p><div class="table-container"><table><thead><tr><th>化学方程式</th><th>还原剂</th><th>氧化剂</th><th>还原产物</th><th>氧化产物</th><th>以上都不是<del>划水摸鱼的</del></th></tr></thead><tbody><tr><td>$\begin{matrix}\textcolor{red}0&amp;\textcolor{green}{+1}\textcolor{blue}{-1}&amp;&amp;\textcolor{green}{+1}\textcolor{red}{-1}&amp;\textcolor{blue}0\\\textcolor{red}{Cl}_2&amp;+2\textcolor{green}{Na}\textcolor{blue}{Br}&amp;===&amp;2\textcolor{green}{Na}\textcolor{red}{Cl}&amp;+\textcolor{blue}{Br}_2\end{matrix}$</td><td>$Br^-$</td><td>$Cl_2$</td><td>$Cl^-$</td><td>$Br^2$</td><td>$Na$</td></tr><tr><td>$\begin{matrix}\textcolor{green}{+1}\textcolor{blue}{-1}&amp;\textcolor{red}0&amp;&amp;\textcolor{green}{+1}\textcolor{red}{-1}&amp;\textcolor{blue}0\\2\textcolor{green}{K}\textcolor{blue}{I}&amp;+\textcolor{red}{Br}_2&amp;===&amp;2\textcolor{green}{K}\textcolor{red}{Br}&amp;+\textcolor{blue}{I}_2\end{matrix}$</td><td>$I^-$</td><td>$Br_2$</td><td>$Br^-$</td><td>$I_2$</td><td>$K$</td></tr><tr><td>$\begin{matrix}\textcolor{green}{+1}\textcolor{blue}{-2}&amp;\textcolor{red}0&amp;&amp;\textcolor{green}{+1}\textcolor{red}{-1}&amp;\textcolor{blue}0\\\textcolor{green}{Na}_2\textcolor{blue}{S}&amp;+\textcolor{red}{I}_2&amp;===&amp;2\textcolor{green}{Na}\textcolor{red}{I}&amp;+\textcolor{blue}{S}\downarrow\end{matrix}$</td><td>$S^{2-}$</td><td>$I^2$</td><td>$I^-$</td><td>$S$</td><td>$Na$</td></tr></tbody></table></div><p>最后，根据前面提到的：</p><blockquote><p>还原剂的还原性大于还原产物，氧化剂的氧化性大于氧化产物。</p></blockquote><p>最终得出答案。</p><p>（1）$S^{2-}&gt;I^-&gt;Br^-&gt;Cl^-$</p><p>（2）$Cl_2&gt;Br_2&gt;I_2&gt;S$</p><h3 id="链接阅读"><a href="#链接阅读" class="headerlink" title="链接阅读"></a>链接阅读</h3><p><a href="https://zhuanlan.zhihu.com/p/478250468">【化学】“氧化还原反应”知识点归纳<br>(知乎专栏）</a></p><p><a href="https://zhuanlan.zhihu.com/p/579662800">高中化学：氧化还原反应的一般规律<br>（知乎专栏）</a></p><p><a href="https://baike.baidu.com/item/%E6%B0%A7%E5%8C%96%E8%BF%98%E5%8E%9F%E5%8F%8D%E5%BA%94/578183">氧化还原反应（百度百科）</a></p><h3 id="花絮"><a href="#花絮" class="headerlink" title="花絮"></a>花絮</h3><p>这么一条方程式：$\begin{matrix}\textcolor{red}0&amp;\textcolor{green}{+1}\textcolor{blue}{-1}&amp;&amp;\textcolor{green}{+1}\textcolor{red}{-1}&amp;\textcolor{blue}0\\\textcolor{red}{Cl}_2&amp;+2\textcolor{green}{Na}\textcolor{blue}{Br}&amp;===&amp;2\textcolor{green}{Na}\textcolor{red}{Cl}&amp;+\textcolor{blue}{Br}_2\end{matrix}$</p><p>大概这么长：</p><pre class="line-numbers language-latex" data-language="latex"><code class="language-latex"><span class="token function selector">\begin</span><span class="token punctuation">&#123;</span><span class="token keyword">matrix</span><span class="token punctuation">&#125;</span><span class="token function selector">\textcolor</span><span class="token punctuation">&#123;</span>red<span class="token punctuation">&#125;</span>0<span class="token punctuation">&amp;</span><span class="token function selector">\textcolor</span><span class="token punctuation">&#123;</span>green<span class="token punctuation">&#125;</span><span class="token punctuation">&#123;</span>+1<span class="token punctuation">&#125;</span><span class="token function selector">\textcolor</span><span class="token punctuation">&#123;</span>blue<span class="token punctuation">&#125;</span><span class="token punctuation">&#123;</span>-1<span class="token punctuation">&#125;</span><span class="token punctuation">&amp;</span><span class="token punctuation">&amp;</span><span class="token function selector">\textcolor</span><span class="token punctuation">&#123;</span>green<span class="token punctuation">&#125;</span><span class="token punctuation">&#123;</span>+1<span class="token punctuation">&#125;</span><span class="token function selector">\textcolor</span><span class="token punctuation">&#123;</span>red<span class="token punctuation">&#125;</span><span class="token punctuation">&#123;</span>-1<span class="token punctuation">&#125;</span><span class="token punctuation">&amp;</span><span class="token function selector">\textcolor</span><span class="token punctuation">&#123;</span>blue<span class="token punctuation">&#125;</span>0<span class="token function selector">\\</span><span class="token function selector">\\</span><span class="token function selector">\textcolor</span><span class="token punctuation">&#123;</span>red<span class="token punctuation">&#125;</span><span class="token punctuation">&#123;</span>Cl<span class="token punctuation">&#125;</span>_2<span class="token punctuation">&amp;</span>+2<span class="token function selector">\textcolor</span><span class="token punctuation">&#123;</span>green<span class="token punctuation">&#125;</span><span class="token punctuation">&#123;</span>Na<span class="token punctuation">&#125;</span><span class="token function selector">\textcolor</span><span class="token punctuation">&#123;</span>blue<span class="token punctuation">&#125;</span><span class="token punctuation">&#123;</span>Br<span class="token punctuation">&#125;</span><span class="token punctuation">&amp;</span>===<span class="token punctuation">&amp;</span>2<span class="token function selector">\textcolor</span><span class="token punctuation">&#123;</span>green<span class="token punctuation">&#125;</span><span class="token punctuation">&#123;</span>Na<span class="token punctuation">&#125;</span><span class="token function selector">\textcolor</span><span class="token punctuation">&#123;</span>red<span class="token punctuation">&#125;</span><span class="token punctuation">&#123;</span>Cl<span class="token punctuation">&#125;</span><span class="token punctuation">&amp;</span>+<span class="token function selector">\textcolor</span><span class="token punctuation">&#123;</span>blue<span class="token punctuation">&#125;</span><span class="token punctuation">&#123;</span>Br<span class="token punctuation">&#125;</span>_2<span class="token function selector">\end</span><span class="token punctuation">&#123;</span><span class="token keyword">matrix</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> cyrxdzj的文化课学习笔记 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>cyrxdzj的文化课学习笔记 数学002 集合与条件</title>
      <link href="/2023-09-23-CyrxNote-Math-002/"/>
      <url>/2023-09-23-CyrxNote-Math-002/</url>
      
        <content type="html"><![CDATA[<h3 id="1、前置知识：子集与真子集"><a href="#1、前置知识：子集与真子集" class="headerlink" title="1、前置知识：子集与真子集"></a>1、前置知识：子集与真子集</h3><p>在开始之前，我们先定义两个集合 $A$ 和 $B$ 和两个条件 $p:x\subseteq A$ 和 $q:x\subseteq B$。这两个条件<strong>并不会</strong>让下面的解释变得更通俗易懂，但是出题人似乎很喜欢考。</p><p>当集合 $A$ 中的东西，$B$ 中也有，$B$ 中的东西 $A$ 中也有，那么 $A=B$。此时 $p$ 是 $q$ 的充分且必要条件（<strong>充要</strong>条件）。</p><p>当集合 $A$ 中的东西，$B$ 中也有，那么 $A\subseteq B$。此时 $p$ 是 $q$ 的<strong>充分</strong>条件。一个特例是 $A=\varnothing$，此时条件依然成立。空集是任何集合的子集。 </p><p>当集合 $A$ 中的东西，$B$ 中也有，但 $B$ 中至少有一个东西 $A$ 是没有的，那么 $A\subsetneqq B$。此时 $p$ 是 $q$ 的<strong>充分</strong>但<strong>不必要</strong>条件。同样，一个特例是 $A=\varnothing,B\ne\varnothing$，此时条件依然成立。空集是任何非空集合的真子集。 在考场上，当出题人说 $p$ 是 $q$ 的<strong>充分不必要</strong>条件时，请及时反应过来，他是在说 $A\subsetneqq B$。</p><h3 id="2、认真分析每个集合中的元素是否可以在另一个集合中出现"><a href="#2、认真分析每个集合中的元素是否可以在另一个集合中出现" class="headerlink" title="2、认真分析每个集合中的元素是否可以在另一个集合中出现"></a>2、认真分析每个集合中的元素是否可以在另一个集合中出现</h3><p>例题：$A=${$x|x=5k+3,k\in Z$}$,B=${$x|x=5k-2,k\in Z$}$,C=${$x|x=10k+3,k\in Z$}，则以下选项中哪个是对的？请注意此题多选。</p><p>A. $A=B$</p><p>B. $A\subsetneqq B$</p><p>C. $B\subsetneqq A$</p><p>D. $A=C$</p><p>E. $A\subsetneqq C$</p><p>F. $C\subsetneqq A$</p><p>正确答案是 AF。可以发现题中的 $k$ 并没有限制正负性，我们可以发现 $5k-2=5(k-1)+3$，因此无论 $A$ 中的元素是什么，我们都有办法在 $B$ 中将其表示出来。同样，$B$ 中的所有元素，都可以在 $A$ 中表示出来。所以极其反直觉的结论就是，$A=B$，A 选项正确。</p><p>再看看 $A$ 和 $C$ 的关系。可以发现 $10k+3=5\times2k+3$，但是 $2k$ 必须是一个偶数而 $k$ 可以是奇数。因此，$C$ 中的元素一定在 $A$ 出现，$A$ 却不是所有元素都在 $C$ 中出现。所以，F 选项正确。</p><p>好，再上点难度。若集合 $A=${$x|x=\frac{1}{9}(2k+1),k\in Z$}$,B=${$x|x=\frac{4}{9}k\pm\frac{1}{9},k\in Z$}，则 $A$ 与 $B$ 之间的关系是？</p><p>请读者认真思考一会。</p><p>可以发现，$\frac{1}{9}(2k+1)=\frac{2}{9}k+\frac{1}{9}$。当 $k$ 取奇数时，$\frac{2}{9}k+\frac{1}{9}=\frac{4}{9}(k+1)\div2-\frac{1}{9}$，而 $(k+1)\div2$ 当然一定是个正整数，符合集合 $B$ 的要求。当 $k$ 取偶数时就更简单了，$\frac{2}{9}k+\frac{1}{9}=\frac{4}{9}k\div2+\frac{1}{9}$，同样可以在集合 $B$ 中表示出来。</p><p>而如果考虑 $B$ 集合里的所有元素是否能在 $A$ 里表示出来？答案是当然可以。$\frac{4}{9}k+\frac{1}{9}=\frac{2}{9}\times2k+\frac{1}{9}$ ，而 $\frac{4}{9}k-\frac{1}{9}=\frac{2}{9}\times(2k-1)+\frac{1}{9}$。</p><p>综上所述，$A=B$。</p><p>对于此类题型，可以尝试将集合 $A$ 的定义式化成与集合 $B$ 的定义式相似的式子，再反过来将集合 $B$ 的定义式化成与集合 $A$ 的定义式相似的式子，再随便举几个例子证明自己的推断。</p><h3 id="3、充分条件？必要条件？充要条件？"><a href="#3、充分条件？必要条件？充要条件？" class="headerlink" title="3、充分条件？必要条件？充要条件？"></a>3、充分条件？必要条件？充要条件？</h3><p>先来一道题引入。</p><p>已知 p 是 r 的充分不必要条件，q 是 r 的充分条件，s 是 r 的必要条件，q 是 s 的必要条件，则正确的选项是？请注意本题多选。</p><p>A. s 是 q 的充要条件</p><p>B. p 是 q 的充分不必要条件</p><p>C. r 是 q 的必要不充分条件</p><p>D. r 是 s 的充分不必要条件</p><p>对于这道题，我们可以像这样在草稿纸上画张图。如果 a 是 b 的充分条件，那么就从 a 到 b 画一条<strong>有向</strong>边。显然，<strong>如果 b 是 a 的必要条件，那么 a 就是 b 的充分条件</strong>，换个说法而已。</p><pre class="mermaid"> flowchart LR p([p]) r([r]) s([s]) q([q]) p-->r q-->r r-->s s-->q</pre><p>接下来，判断每个选项。在上面那张图中，如果可以从 a 出发到达 b，<strong>那么 a 就是 b 的充分条件</strong>，否则不是。神奇吧？</p><p>因此，根据这幅图，我们判断出 AB 是正确答案。根据图片，r、s、q 互为充要条件，因此 A 正确，CD 错误。从 p 可以走到 q，但是从 q 不能走到 p，因此 B 正确。</p><p><del>论信息学知识“有向图的连通性”在文化课的妙用。</del></p><p>在生物学中也可以使用信息学的知识“有向无环图的动态规划”数生物链的数量，在这里按下不表。</p><h3 id="4、容斥原理"><a href="#4、容斥原理" class="headerlink" title="4、容斥原理"></a>4、容斥原理</h3><p>某个班有很多人。这个班 $\frac{3}{8}$ 的人喜欢语文，这个班喜欢数学的人比喜欢语文的人多 $3$ 人，同时喜欢两门科目的人比同时不喜欢两门科目的人少 $7$ 人。请问，此班有多少人？</p><p>对于这道题，应使用容斥原理分析，再用方程求解。设全班 $x$ 人，同时喜欢两门科目的人有 $a$ 人，同时不喜欢两门科目的人有 $b$ 人。由此，我们可以列出方程，$\frac{3}{8}x+\frac{3}{8}x+3-a+b=x$。</p><p>这时我们发现这是一个三元一次方程，不会解。但是吧，注意题目有一句“同时喜欢两门科目的人比同时不喜欢两门科目的人少 $7$ 人”，这就是说 $b-a=7$。将这一条代入原方程，解得 $x=40$。<del>自己吐槽自己：对于信竞生来说，才 $40$ 个人也好意思说多？</del></p><p>验证一下，这意味着 $12$ 人只喜欢语文，$15$ 人只喜欢数学，$3$ 人既喜欢语文又喜欢数学，$10$ 人都不喜欢。</p><h3 id="5、当集合的内容为不等式解集时，集合间的关系"><a href="#5、当集合的内容为不等式解集时，集合间的关系" class="headerlink" title="5、当集合的内容为不等式解集时，集合间的关系"></a>5、当集合的内容为不等式解集时，集合间的关系</h3><p>当 $A=${$x|1&lt;x&lt;3$}$,B=${$x|2m&lt;x&lt;1-m$} 时，若 $A\cap B=\varnothing$，求实数 $m$ 的取值范围。</p><p>可以发现集合 $A$ 已经被锁死了，不会变的。并且集合 $A$ 并不是空集。因此可以分几种情况。</p><p>情况 1：B 为空集。换句话说，$B$ 里面的那个不等式无解。显然，当 $2m\ge1-m$ 时，这个不等式无解。即 $m\ge\frac{1}{3}$。</p><p><strong>请一定要注意并思考 $2m\ge1-m$ 中的那个不等号能不能取等号。</strong> 具体来说，可以发现集合 $B$ 的数 $x$ 的范围是 $2m &lt; x &lt; 1-m$。如果这两个不等号有一个是不取等号的，那么可以 $2m\ge1-m$。否则，当 $2m\le x\le1-m$ 时，只有当 $2m&gt;1-m$ 时才无解，因为当 $2m=1-m$ 时，$x$ 可以取 $2m$，不等式仍然有解，即使是唯一解。</p><p>情况 2：$B$ 集合中的最大值比 $A$ 集合中的最小值还要小。此时 $1-m\le1$ ，即 $m\ge0$。再次强调，注意能不能取等号。判断方法和上方大同小异。也可以尝试取一下等号，再判断 $A$ 和 $B$ 是否有交集，哪怕只有一个数同时出现也不行。</p><p>情况 3：$B$ 集合中的最小值比 $A$ 集合中的最大值还要大。此时 $2m\ge3$，也就是 $m\ge\frac{3}{2}$。虽然说这个时候 $B$ 集合都是空集了。</p><p>综上所述，$m$ 的取值范围为 $m\ge0$。</p><p>在做此类问题时，请<strong>善用数轴</strong>。如果你对你的脑子很有自信，可以在脑海里想一个数轴。如果你对你的脑子没啥自信，就拿出草稿纸。</p><p>好，认真读完上面的内容，不懂记得问身边的老师和同学。</p><p>接下来，再看一题吧。</p><p>已知集合 $A=${$x|-2\le x\le5$}$,B=${$x|m+1\le x\le2m-1$}，设 $p:x\in A;q:x\in B$，若 p 是 q 的<strong>必要不充分</strong>条件，求实数 m 的范围。</p><p>首先，我们先要求出 $A$ 和 $B$ 的关系。如果不会，把前面的内容再认真读一遍吧。</p><blockquote><p> 在考场上，当出题人说 $p$ 是 $q$ 的<strong>充分不必要</strong>条件时，请及时反应过来，他是在说 $A\subsetneqq B$。</p><p>显然，<strong>如果 b 是 a 的必要条件，那么 a 就是 b 的充分条件</strong>，换个说法而已。</p></blockquote><p>因此，我们可以得出 $B\subsetneqq A$ 的结论。</p><p>首先，空集是任何非空集合的真子集。</p><p>什么时候 $B$ 为空集？是 $m+1&gt;2m-1$ 时，还是 $m+1\ge2m-1$ 时？</p><p>当然是前者，因为当 $m+1=x=2m-1$ 时集合 $B$ 仍有元素。</p><p>然后，当 $-2\le m+1\le2m-1\le5$ 时，集合 $B$ 是 $A$ 的<strong>子集</strong>。请注意，当 $-2=m+1&lt;2m-1=5$ 时，$B\subsetneqq A$ <strong>不成立！</strong> 虽然本题中不会出现这种情况，<strong>但请务必提防出题人的套路，分清“子集”和“真子集”的区别。</strong></p><p>因此再分 2 种情况，第一种是 $-2\le m+1$ 且 $2m-1&lt;5$，第二种是 $-2&lt;m+1$ 且 $2m-1\le5$。</p><p>最终答案是 $m&lt;3$。</p>]]></content>
      
      
      <categories>
          
          <category> cyrxdzj的文化课学习笔记 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>cyrxdzj的文化课学习笔记 数学001 基本不等式</title>
      <link href="/2023-09-22-CyrxNote-Math-001/"/>
      <url>/2023-09-22-CyrxNote-Math-001/</url>
      
        <content type="html"><![CDATA[<p>基本不等式是真 tm 难学，前一章节”集合“还那么简单，再一章难度就直接拉满。</p><h3 id="1、1-的代换法"><a href="#1、1-的代换法" class="headerlink" title="1、1 的代换法"></a>1、1 的代换法</h3><p><strong>众所周知，任何数乘 $1$ 都等于原数。</strong></p><p>例如，若 $x&gt;0,y&gt;0,\frac{1}{x}+\frac{9}{y}=1$，求 $x+y$ 的最小值。</p><p>对于这道题，可以发现 $x+y=(x+y)(\frac{1}{x}+\frac{9}{y})=1+9+\frac{9x}{y}+\frac{y}{x}$（暴力死算出来），然后就可以将后面那一坨 $\frac{9x}{y}+\frac{y}{x}$ 用基本不等式求最值了。</p><p>如果 $\frac{1}{x}+\frac{9}{y}=2\ne1$，那也好办，<strong>可以在整个算式前面乘上一个数使这个算式的值为 $1$。</strong> 对于上面的式子，$\frac{1}{2}\times（\frac{1}{x}+\frac{9}{y})=1$，那么 $x+y=(x+y)[\frac{1}{2}\times(\frac{1}{x}+\frac{9}{y})]=(x+y)(\frac{1}{x}+\frac{9}{y})\times\frac{1}{2}$，求出前面的 $(x+y)(\frac{1}{x}+\frac{9}{y})$ 的最值就搞定了。</p><p>再看看这个。若 $x&gt;0,y&gt;0,x+8y=xy$，求 $x+2y$ 的最小值。</p><p>可以发现，$(x+8y)\div(xy)=(xy)\div(xy)$，也就是说 $\frac{1}{y}+\frac{8}{x}=1$。又回来了。</p><h3 id="2、配凑法"><a href="#2、配凑法" class="headerlink" title="2、配凑法"></a>2、配凑法</h3><p>积等和最小（当 $a&gt;0,b&gt;0$ 且 $ab$ 为定值时，$a+b$ 的最小值为 $2\sqrt{ab}$），和等积最大（当 $a&gt;0,b&gt;0$ 且 $a+b$ 为定值时，$ab$ 的最大值为 $(\frac{a+b}{2})^2$）。想必一开始学基本不等式时，读者就知道这句话了。</p><p>那么，当 $x&gt;\frac{1}{2}$ 时，求 $x+\frac{1}{2x-1}$ 的最小值。</p><p>可以发现 $\frac{x}{2x-1}$ 不是定值，不能直接开基本不等式。</p><p>那么，<strong>我们可以尝试将前面的 $x$ 转换成一个整式，使这个整式除以 $2x-1$ 可以得到一个实数</strong>（无论是不是整数都行，<strong>别带未知数就好</strong>）。</p><p>于是，原式被转化为了 $(x-0.5)+\frac{1}{2x-1}+0.5$，先在前面加 $0.5$，再在后面减 $0.5$。</p><p>这样就可以用基本不等式了：$(x-0.5)+\frac{1}{2x-1}+0.5\ge2\sqrt{\frac{x-0.5}{2x-1}}+0.5$。去算吧。</p><h3 id="3、结合-1-和-2-的知识解题"><a href="#3、结合-1-和-2-的知识解题" class="headerlink" title="3、结合 1 和 2 的知识解题"></a>3、结合 1 和 2 的知识解题</h3><p>当 $x&gt;-2,y&gt;-2,\frac{1}{x+2}+\frac{1}{y+2}=\frac{1}{6}$ 时，求 $x+y$ 的最小值。</p><p>看到这里就别往下看，请读者自己思考一下吧。</p><p>首先，由方法 1 可知，$6(\frac{1}{x+2}+\frac{1}{y+2})=1$。</p><p>但即便是这样，$x+y$ 也并不是很好处理。</p><p>这个时候，我们可以借助方法 2，$x+y=(x+2)+(y+2)-4$。</p><p>接下来，求出 $(x+2)+(y+2)$ 的最小值即可。</p><p>$x+y=(x+2)+(y+2)-4$……使用配凑法</p><p>$=[(x+2)+(y+2)]\times6(\frac{1}{x+2}+\frac{1}{y+2})-4$……使用 1 的代换法</p><p>$=6\times\begin{bmatrix}(x+2)+(y+2)\end{bmatrix}(\frac{1}{x+2}+\frac{1}{y+2})-4$……整理式子，将 $6$ 丢一边</p><p>$=6\times(1+1+\frac{x+2}{y+2}+\frac{y+2}{x+2})-4$……强行计算括号中的内容</p><p>$=6\times(\frac{x+2}{y+2}+\frac{y+2}{x+2})+12-4$……把无关的 $12$（即 $6\times(1+1)$）丢出去</p><p>$\ge6\times2\sqrt{\frac{x+2}{y+2}\times\frac{y+2}{x+2}}+8$……启用基本不等式</p><p>$=20$……计算得出结果</p><p>搞定。</p><h3 id="4、使系数相等"><a href="#4、使系数相等" class="headerlink" title="4、使系数相等"></a>4、使系数相等</h3><p>再看看：当 $a&gt;0,b&gt;0,2a+3b=12$ 时，求 $\frac{1}{ab}$ 的最小值。</p><p>显然，当 $ab$ 最大的时候，就是 $\frac{1}{ab}$ 最小的时候。</p><p>但是，条件是 $2a+3b=12$,这意味着 $a+b$ 是会变的，不能直接使用基本不等式。</p><p>那么，我们考虑改变一下 $ab$ 这边。给 $a$ 搞个系数 $2$，给 $b$ 搞个系数 $3$，最后统一 $\div6$，我们就有 $ab=(2a\cdot3b)\times\frac{1}{6}\le(\frac{2a+3b}{2})^2\times\frac{1}{6}=6$，那么 $\frac{1}{ab}$ 的最小值就是 $\frac{1}{6}$。</p><h3 id="5、将分数中的分子用类似于带分数的思想提取出来"><a href="#5、将分数中的分子用类似于带分数的思想提取出来" class="headerlink" title="5、将分数中的分子用类似于带分数的思想提取出来"></a>5、将分数中的分子用类似于带分数的思想提取出来</h3><p>当 $x&gt;1$ 时，求 $\frac{x^2-x+1}{x-1}$ 的最小值。</p><p>对于这道题，可以发现 $(x-1)x=x^2-x$，于是原式可以被化为 $\frac{x(x-1)+1}{x-1}=x+\frac{1}{x-1}$。接着再用配凑法，即可算出式子的最小值为 $3$。</p><p>是的，多项式也可以除以多项式的，不过可能会有余数。$(x^2-x+1)\div(x-1)=x……1$。</p><h3 id="6、转化为一元二次不等式求解"><a href="#6、转化为一元二次不等式求解" class="headerlink" title="6、转化为一元二次不等式求解"></a>6、转化为一元二次不等式求解</h3><p>已知 $ab+a+b=8,a&gt;0,b&gt;0$，则：</p><p>A. $ab$ 最大值为 $2$</p><p>B. $a+b$ 最小值为 $4$</p><p>C. $a+2b$ 最小值为 $6\sqrt2-3$</p><p>D. $\frac{1}{a(b+1)}+\frac{1}{b}\ge\frac{1}{2}$</p><p>请注意本题多选。</p><p>可以由基本不等式发现，$a+b\ge2\sqrt{ab},ab\le(\frac{a+b}{2})^2$，也就是说：</p><ol><li><p>$8=ab+a+b\ge ab+2\sqrt{ab}$</p></li><li><p>$8=ab+a+b\le(\frac{a+b}{2})^2+(a+b)=\frac{1}{4}(a+b)^2+(a+b)$。</p></li></ol><p>经过一定的转化，我们就可以分别得到 2 个一元二次不等式：</p><p>$(\sqrt{ab})^2+2\sqrt{ab}-8\le0$（将 $\sqrt{ab}$ 视为一个未知数整体）</p><p>$(a+b)^2+4(a+b)-32\ge0$（将 $(a+b)$ 视为一个未知数整体）</p><p>根据一元二次不等式的求解方法，第一条不等式可以得出 $-4\le\sqrt{ab}\le2$，第二条不等式可以得出 $a+b\le-8$ 或 $a+b\ge4$。</p><p>别忘了 $a&gt;0,b&gt;0$。因此，$0 &lt; \sqrt{ab}\le2,a+b\ge4$。因此，A 选项错误，B 选项正确。</p><p>C 选项的情况，将在下一节讲解。</p><h3 id="7、消元：将一个数用另一个数表示出来"><a href="#7、消元：将一个数用另一个数表示出来" class="headerlink" title="7、消元：将一个数用另一个数表示出来"></a>7、消元：将一个数用另一个数表示出来</h3><p>回到前面的题目。</p><p>可以发现，$ab+a+b=ab+b+a=(a+1)b+a$。</p><p>所以，因为 $ab+a+b=8$，所以 $b=\frac{8-a}{a+1}$。</p><p>因此 $a+2b=a+2\times\frac{8-a}{a+1}=a+\frac{16-2a}{a+1}=a-2+\frac{18}{a+1}=a+1+\frac{18}{a+1}-3\ge2\sqrt{ ( a+1 ) \times\frac{18}{a+1}}-3=6\sqrt{2}-3$。C 选项正确。</p><p>D 选项的情况，将在下一节讲解。</p><h3 id="8、1-的代换法（进阶版）"><a href="#8、1-的代换法（进阶版）" class="headerlink" title="8、1 的代换法（进阶版）"></a>8、1 的代换法（进阶版）</h3><p>可以发现，$a(b+1)+b=ab+a+b=8$。</p><p>因此，$\frac{1}{a(b+1)}+\frac{1}{b}=\frac{1}{8}[a(b+1)+b][\frac{1}{a(b+1)}+\frac{1}{b}]=\frac{1}{8}[1+1+\frac{a(b+1)}{b}+\frac{b}{a(b+1)}]\ge\frac{1}{8}(2+2\sqrt{1})=\frac{1}{2}$。D 选项正确。</p><p>其实也没进阶多少，只是关系隐藏起来了。</p><h3 id="9、超级无敌分数嵌套"><a href="#9、超级无敌分数嵌套" class="headerlink" title="9、超级无敌分数嵌套"></a>9、超级无敌分数嵌套</h3><p>求 $\frac{x^2+3x+3}{2x^2+7x+7}(x&gt;-1)$ 的最小值。</p><p>首先，$2x^2+7x+7=2(x^2+3x+3)+(x+1)$，因此 $\frac{x^2+3x+3}{2x^2+7x+7}=\frac{x^2+3x+3}{2(x^2+3x+3)+(x+1)}=\frac{1}{2+\frac{x+1}{x^2+3x+3}}$（分子分母同时除以 $x^2+3x+3$）。显然，当 $\frac{x+1}{x^2+3x+3}$ 最大时，分母 $2+\frac{x+1}{x^2+3x+3}$ 最大，分数整体最小。</p><p>然后，$x^2+3x+3=(x+1)(x+1)+(x+1)+1$，因此 $\frac{x+1}{x^2+3x+3}=\frac{x+1}{ ( x+1 ) ( x+1 ) + ( x+1 )+1}=\frac{1}{x+1+1+\frac{1}{x+1}}$。可以发现，当 $x+1+1+\frac{1}{x+1}$ 最小时，$\frac{1}{x+1+1+\frac{1}{x+1}}$ 最大。</p><p>我们可以很容易地求出 $x+1+1+\frac{1}{x+1}$ 最小为 $3$，所以 $\frac{1}{x+1+1+\frac{1}{x+1}}$ 最大为 $\frac{1}{3}$，进而求出原式最小值为 $\frac{1}{2+\frac{1}{3}}=\frac{3}{7}$。</p><p>对于这种问题，我们可以不断地尝试将分子化为 $1$，然后，当 $a&gt;0,b&gt;0$ 时，$a$ 不变的情况下，$b$ 越大时 $\frac{a}{b}$ 越小。根据这个原理，可以反复求最大/最小值，最终解出题目。</p><h3 id="10、使分子和分母变得可以互相约分"><a href="#10、使分子和分母变得可以互相约分" class="headerlink" title="10、使分子和分母变得可以互相约分"></a>10、使分子和分母变得可以互相约分</h3><p>已知 $x+y=1,y&gt;0,x&gt;0$，求 $\frac{1}{2x}+\frac{x}{y+1}$ 的最小值。</p><p>可以发现，此时无法直接使用基本不等式，因为 $1$ 和 $y+1$ 不能互相约分掉。</p><p>考虑 $x+y=1$ 这个条件，可以发现 $x+y+1=2$，那么原式就等于 $\frac{\frac{1}{2}(x+y+1)}{2x}+\frac{x}{y+1}=\frac{x+y+1}{4x}+\frac{x}{y+1}=\frac{1}{4}+\frac{y+1}{4x}+\frac{x}{y+1}\ge\frac{1}{4}+2\sqrt{\frac{y+1}{4x}\times\frac{x}{y+1}}=\frac{5}{4}$，当且仅当 $\frac{y+1}{4x}=\frac{x}{y+1}$ 时（即 $x=\frac{2}{3},y=\frac{1}{3}$ 时），可以取等号。</p><h3 id="11、总结"><a href="#11、总结" class="headerlink" title="11、总结"></a>11、总结</h3><p>不等式问题没有固定解法，在高考中难度相当大。这种题目只能靠多刷题积累来的经验，因此应记住做过的题的解法，也要善于利用网络。</p><h3 id="链接阅读"><a href="#链接阅读" class="headerlink" title="链接阅读"></a>链接阅读</h3><p><a href="https://zhuanlan.zhihu.com/p/185052402">基本不等式解题技巧（一）（知乎专栏）</a></p><p><a href="https://zhuanlan.zhihu.com/p/205447579">基本不等式（二）——多元问题处理技巧（知乎专栏）</a>（友情提醒，这一篇文章贼tm难）</p><p><a href="https://zhuanlan.zhihu.com/p/482152623">基本不等式求最值题型总结（知乎专栏）</a></p>]]></content>
      
      
      <categories>
          
          <category> cyrxdzj的文化课学习笔记 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>cyrxdzj的文化课学习笔记 目录</title>
      <link href="/2023-09-22-CyrxNoteIndex/"/>
      <url>/2023-09-22-CyrxNoteIndex/</url>
      
        <content type="html"><![CDATA[<p>此为《cyrxdzj的文化课学习笔记》的目录。您可以在这里寻找您需要的文章。</p><div class="table-container"><table><thead><tr><th>科目</th><th>标题</th><th>创建时间</th><th>更新时间</th></tr></thead><tbody><tr><td>数学</td><td><a href="/2023-09-22-CyrxNote-Math-001/">cyrxdzj的文化课学习笔记 数学001 基本不等式</a></td><td>2023-09-22 21:58:37</td><td>2023-10-05 07:36:34</td></tr><tr><td>数学</td><td><a href="/2023-09-23-CyrxNote-Math-002/">cyrxdzj的文化课学习笔记 数学002 集合与条件</a></td><td>2023-09-23 22:05:13</td><td>2023-10-03 19:27:18</td></tr><tr><td>数学</td><td><a href="/2023-10-04-CyrxNote-Math-003/">cyrxdzj的文化课学习笔记 数学003 一元二次不等式</a></td><td>2023-10-04 20:57:51</td><td>2023-10-08 18:45:00</td></tr><tr><td>数学</td><td><a href="/2023-10-09-CyrxNote-Math-004/">cyrxdzj的文化课学习笔记 数学004 函数</a></td><td>2023-10-09 07:01:12</td><td>2023-10-11 18:25:36</td></tr><tr><td>化学</td><td><a href="/2023-09-28-CyrxNote-Chemistry-001/">cyrxdzj的文化课学习笔记 化学001 氧化还原反应</a></td><td>2023-09-28 20:25:46</td><td>2023-10-14 06:12:56</td></tr></tbody></table></div>]]></content>
      
      
      <categories>
          
          <category> cyrxdzj的文化课学习笔记 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>从智慧课堂系统的角度浅谈计算机安全</title>
      <link href="/2023-05-21-TalkingAboutComputerSecurityFromTheIntelligentClassromSystem/"/>
      <url>/2023-05-21-TalkingAboutComputerSecurityFromTheIntelligentClassromSystem/</url>
      
        <content type="html"><![CDATA[<h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><p>最近，很多学校都引入了智慧课堂系统，比如我所在的学校。智慧课堂系统在学习上的用处暂且不论，但是我也发现，智慧课堂系统也同时会造成计算机安全问题。</p><p>本文将从智慧课堂系统的角度浅谈计算机安全。</p><h3 id="存在的问题"><a href="#存在的问题" class="headerlink" title="存在的问题"></a>存在的问题</h3><h5 id="1、使用未经加密的通道传输关键信息"><a href="#1、使用未经加密的通道传输关键信息" class="headerlink" title="1、使用未经加密的通道传输关键信息"></a>1、使用未经加密的通道传输关键信息</h5><p>我注意到，该智慧课堂系统在传输数据时是未经加密的。例如，使用HTTP协议传输更新指令、个人信息甚至登录信息（如密码、设备序列号等）。这无疑严重危害信息安全。</p><p>然而令人费解的是，该系统大部分数据都使用了HTTPS协议，唯独api.xxxx.cn（注：xxxx.cn是该系统官网的域名）（注：从api这个前缀就知道它多重要了）却使用HTTP协议（甚至连Let’s Encrypted的免费证书都不愿申请）。为何系统开发者却没有看到？但凡一个程序员看到这个大大的 <code>http://</code> 都不至于出现这种情况。</p><p>即使是这样，该系统在登录时都明文传输密码等关键信息，令人费解。</p><h5 id="2、获取重要信息前未经鉴权"><a href="#2、获取重要信息前未经鉴权" class="headerlink" title="2、获取重要信息前未经鉴权"></a>2、获取重要信息前未经鉴权</h5><p>某天系统更新后，该系统的平板中新安装了名叫“XX桌面”的桌面应用，代替了系统原有的桌面。同时，系统“安全与屏幕保护”设置项中，屏幕锁定方式也只能选择“无”或“滑动”。替代原有锁屏的，是XX桌面的新功能“手势锁屏密码”。</p><p>设置手势锁屏密码后，每次解锁，XX桌面都会要求输入正确的手势，或使用系统的登录密码解锁。</p><p>这看起来很安全，然而，根据我抓包发现，该桌面会上传手势密码至服务器（这次终于是HTTPS了），并定期从服务器获取该用户的手势密码（换句话说，手势密码跨设备同步）。而获取手势密码的接口需要传入用户UID和ticket（在登录接口凭用户名和密码获取，是临时密码，相当于cookie）。</p><p>这看起来也很安全。然而，我注意到，服务器压根没校验ticket。用户UID随便一个接口都会返回，我可以在网页端打开其他同学的个人主页，在网页源代码找到用户UID。然后将用户UID传入接口，即可获取任意用户的锁屏手势密码。好在修改接口还会校验ticket，也获取不到登录密码。</p><p>嗯，这么低级的错误都能犯。我不知道该说什么。</p><h5 id="3、拼接命令没有校验参数合法性"><a href="#3、拼接命令没有校验参数合法性" class="headerlink" title="3、拼接命令没有校验参数合法性"></a>3、拼接命令没有校验参数合法性</h5><p>该系统的平板由另一供应商提供，平板中预装了一个用于控制权限的应用（以下称为mdm_permission）。mdm_permission没有主动动作，但是当其它应用（多为智慧课堂平台预装的应用）调用它时，平板供应商预装的应用便可根据指令授予或禁用第三方应用的权限。</p><p>就不说mdm_permission有没有鉴权了，它还是通过调用appops授予/禁用权限的。于是mdm_permission便只根据包名和权限名拼接命令，丝毫不管包名或权限会不会是 <code>; echo hello ;</code> 这种可能。</p><p>然后，mdm_permission还是具有system权限的系统应用。</p><p>好消息是，mdm_permission有亿点点难调用。一般的第三方应用看不见的。</p><h5 id="4、设备解锁存在的安全问题"><a href="#4、设备解锁存在的安全问题" class="headerlink" title="4、设备解锁存在的安全问题"></a>4、设备解锁存在的安全问题</h5><p>回到锁屏的问题。</p><p>我们注意到，智慧课堂设备的主要应用是教室，这是人员密集的地方。在这里输入锁屏密码，极易被有心之人看到。</p><p>因此，我认为，在此种情况下，最好的解决方案，应该是<strong>生物识别</strong>。如，指纹识别。</p><p>不过，就不知道以利益为重的厂商愿不愿意花钱买识别传感器了。</p><h3 id="解决问题的建议"><a href="#解决问题的建议" class="headerlink" title="解决问题的建议"></a>解决问题的建议</h3><p>第一，引入HTTPS保护。哪怕只是Let’s Encrypted证书。不能让关键数据在网络上裸奔。</p><p>第二，鉴权。做好Code Review，该鉴权时必须鉴权。</p><p>第三，不要小看客户，并不是初中生都不会编程。</p>]]></content>
      
      
      <categories>
          
          <category> 杂谈 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>洛谷2021年07月月赛参加总结</title>
      <link href="/2021-07-22-LuoguMonthlyCompetition202107Summary/"/>
      <url>/2021-07-22-LuoguMonthlyCompetition202107Summary/</url>
      
        <content type="html"><![CDATA[<h3 id="一、前言"><a href="#一、前言" class="headerlink" title="一、前言"></a>一、前言</h3><p>6月份的“比赛荒”之后，洛谷举办了2021年07月月赛。这次我还是参加Div.2。</p><p>以下只讲我会做的题目（事实上也只会做一道，B题和C题都是暴力骗分）。</p><h3 id="二、A：远古档案馆（Ancient-Archive）"><a href="#二、A：远古档案馆（Ancient-Archive）" class="headerlink" title="二、A：远古档案馆（Ancient Archive）"></a>二、A：远古档案馆（Ancient Archive）</h3><p>传送门：<a href="https://www.luogu.com.cn/problem/P7724?contestId=46177">https://www.luogu.com.cn/problem/P7724?contestId=46177</a></p><p>首先，当空格数量为2~4时，初始方阵肯定可以经变换后与最终方阵相同，因为此时方块可以任意移动。</p><p>然后，当空格数量为0时，方块不可移动。此时，直接判定两个方阵是否相同即可。</p><p>最后是难点：当空格数量为1时的判断。</p><p>其实也不难，重复以下判断12遍：</p><ul><li><p>如果空格在左上角，则将左下角的方格往上移；</p></li><li><p>如果空格在左下角，则将右下角的方格往左移；</p></li><li><p>如果空格在右下角，则将右上角的方格往下移；</p></li><li><p>如果空格在右上角，则将左上角的空格往右移。</p></li></ul><p>每一步过后，判断两个方阵是否一致。如果一致，直接输出Yes。</p><p>如果移动了12次，还没有一致的情况，则输出No。</p><p>移动12次过后，方阵恰好形成一个循环。所以只用移动12次。</p><p>$AC$ 代码：</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;cstdio></span></span><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span><span class="token keyword">int</span> start_graph<span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">,</span>end_graph<span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">int</span> space_count<span class="token punctuation">;</span><span class="token keyword">int</span> space_x<span class="token punctuation">,</span>space_y<span class="token punctuation">;</span><span class="token keyword">bool</span> <span class="token function">equal</span><span class="token punctuation">(</span><span class="token keyword">int</span> a<span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token keyword">int</span> b<span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>i<span class="token operator">&lt;=</span><span class="token number">2</span><span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> j<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>j<span class="token operator">&lt;=</span><span class="token number">2</span><span class="token punctuation">;</span>j<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">if</span><span class="token punctuation">(</span>a<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token operator">!=</span>b<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>i<span class="token operator">&lt;=</span><span class="token number">2</span><span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> j<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>j<span class="token operator">&lt;=</span><span class="token number">2</span><span class="token punctuation">;</span>j<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%d"</span><span class="token punctuation">,</span><span class="token operator">&amp;</span>start_graph<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span>start_graph<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>space_count<span class="token operator">++</span><span class="token punctuation">;</span>space_x<span class="token operator">=</span>i<span class="token punctuation">;</span>space_y<span class="token operator">=</span>j<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>i<span class="token operator">&lt;=</span><span class="token number">2</span><span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> j<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>j<span class="token operator">&lt;=</span><span class="token number">2</span><span class="token punctuation">;</span>j<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%d"</span><span class="token punctuation">,</span><span class="token operator">&amp;</span>end_graph<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">if</span><span class="token punctuation">(</span>space_count<span class="token operator">&lt;=</span><span class="token number">4</span><span class="token operator">&amp;&amp;</span>space_count<span class="token operator">>=</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"Yes\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span>space_count<span class="token operator">==</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">equal</span><span class="token punctuation">(</span>start_graph<span class="token punctuation">,</span>end_graph<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"Yes\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">else</span><span class="token punctuation">&#123;</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"No\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">else</span><span class="token punctuation">&#123;</span><span class="token keyword">int</span> oper_graph<span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>i<span class="token operator">&lt;=</span><span class="token number">2</span><span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> j<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>j<span class="token operator">&lt;=</span><span class="token number">2</span><span class="token punctuation">;</span>j<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>oper_graph<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token operator">=</span>start_graph<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>i<span class="token operator">&lt;=</span><span class="token number">12</span><span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">if</span><span class="token punctuation">(</span>space_x<span class="token operator">==</span><span class="token number">1</span><span class="token operator">&amp;&amp;</span>space_y<span class="token operator">==</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>oper_graph<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">=</span>oper_graph<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>oper_graph<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span><span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">equal</span><span class="token punctuation">(</span>oper_graph<span class="token punctuation">,</span>end_graph<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"Yes\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span>space_x<span class="token operator">=</span><span class="token number">2</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span>space_x<span class="token operator">==</span><span class="token number">2</span><span class="token operator">&amp;&amp;</span>space_y<span class="token operator">==</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>oper_graph<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">=</span>oper_graph<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">;</span>oper_graph<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span><span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">equal</span><span class="token punctuation">(</span>oper_graph<span class="token punctuation">,</span>end_graph<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"Yes\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span>space_y<span class="token operator">=</span><span class="token number">2</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span>space_x<span class="token operator">==</span><span class="token number">2</span><span class="token operator">&amp;&amp;</span>space_y<span class="token operator">==</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>oper_graph<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token operator">=</span>oper_graph<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">;</span>oper_graph<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span><span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">equal</span><span class="token punctuation">(</span>oper_graph<span class="token punctuation">,</span>end_graph<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"Yes\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span>space_x<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span>space_x<span class="token operator">==</span><span class="token number">1</span><span class="token operator">&amp;&amp;</span>space_y<span class="token operator">==</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>oper_graph<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token operator">=</span>oper_graph<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>oper_graph<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span><span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">equal</span><span class="token punctuation">(</span>oper_graph<span class="token punctuation">,</span>end_graph<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"Yes\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span>space_y<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"No\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="三、B：珍珠帝王蟹（Crab-King）"><a href="#三、B：珍珠帝王蟹（Crab-King）" class="headerlink" title="三、B：珍珠帝王蟹（Crab King）"></a>三、B：珍珠帝王蟹（Crab King）</h3><p>对于本题，我同时使用了暴力算法和非暴力算法。</p><p>对于Subtask1，由于数据较小，可以使用 $DFS$ 暴力搜索。</p><p>对于Subtask2，由于 $v&gt;0$，可以证明，先加后乘是最优的选择。</p><p>这就能拿 $48$ 分了。</p><p>代码：</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;cstdio></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;algorithm></span></span><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span><span class="token keyword">struct</span> <span class="token class-name">pearl_object</span><span class="token punctuation">&#123;</span><span class="token keyword">char</span> op<span class="token punctuation">;</span><span class="token keyword">long</span> <span class="token keyword">long</span> num<span class="token punctuation">;</span><span class="token punctuation">&#125;</span>add_pearl<span class="token punctuation">[</span><span class="token number">100005</span><span class="token punctuation">]</span><span class="token punctuation">,</span>mul_pearl<span class="token punctuation">[</span><span class="token number">100005</span><span class="token punctuation">]</span><span class="token punctuation">,</span>pearl<span class="token punctuation">[</span><span class="token number">100005</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">int</span> add_cnt<span class="token punctuation">,</span>mul_cnt<span class="token punctuation">;</span><span class="token keyword">int</span> n<span class="token punctuation">;</span><span class="token keyword">long</span> <span class="token keyword">long</span> ans<span class="token operator">=</span><span class="token operator">-</span><span class="token number">0x7fffffffff</span><span class="token punctuation">;</span><span class="token keyword">bool</span> flag<span class="token operator">=</span><span class="token boolean">true</span><span class="token punctuation">;</span><span class="token keyword">int</span> dfs_array<span class="token punctuation">[</span><span class="token number">100005</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">bool</span> visit<span class="token punctuation">[</span><span class="token number">100005</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">void</span> <span class="token function">dfs</span><span class="token punctuation">(</span><span class="token keyword">int</span> x<span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">if</span><span class="token punctuation">(</span>x<span class="token operator">></span>n<span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">long</span> <span class="token keyword">long</span> temp_ans<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span><span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>i<span class="token operator">&lt;=</span>n<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">if</span><span class="token punctuation">(</span>pearl<span class="token punctuation">[</span>dfs_array<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">.</span>op<span class="token operator">==</span><span class="token char">'+'</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>temp_ans<span class="token operator">+=</span>pearl<span class="token punctuation">[</span>dfs_array<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">.</span>num<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">else</span><span class="token punctuation">&#123;</span>temp_ans<span class="token operator">*=</span>pearl<span class="token punctuation">[</span>dfs_array<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">.</span>num<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token comment">//printf("%lld\n",temp_ans);</span><span class="token keyword">if</span><span class="token punctuation">(</span>temp_ans<span class="token operator">></span>ans<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>ans<span class="token operator">=</span>temp_ans<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>i<span class="token operator">&lt;=</span>n<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span>visit<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>visit<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">=</span><span class="token boolean">true</span><span class="token punctuation">;</span>dfs_array<span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token operator">=</span>i<span class="token punctuation">;</span><span class="token function">dfs</span><span class="token punctuation">(</span>x<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>visit<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">=</span><span class="token boolean">false</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%d"</span><span class="token punctuation">,</span><span class="token operator">&amp;</span>n<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>i<span class="token operator">&lt;=</span>n<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">char</span> op<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">long</span> <span class="token keyword">long</span> num<span class="token punctuation">;</span><span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%s%lld"</span><span class="token punctuation">,</span><span class="token operator">&amp;</span>op<span class="token punctuation">,</span><span class="token operator">&amp;</span>num<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">if</span><span class="token punctuation">(</span>num<span class="token operator">&lt;=</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>flag<span class="token operator">=</span><span class="token boolean">false</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">if</span><span class="token punctuation">(</span>op<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token operator">==</span><span class="token char">'+'</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>add_cnt<span class="token operator">++</span><span class="token punctuation">;</span>add_pearl<span class="token punctuation">[</span>add_cnt<span class="token punctuation">]</span><span class="token punctuation">.</span>op<span class="token operator">=</span>op<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span>add_pearl<span class="token punctuation">[</span>add_cnt<span class="token punctuation">]</span><span class="token punctuation">.</span>num<span class="token operator">=</span>num<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">else</span><span class="token punctuation">&#123;</span>mul_cnt<span class="token operator">++</span><span class="token punctuation">;</span>mul_pearl<span class="token punctuation">[</span>mul_cnt<span class="token punctuation">]</span><span class="token punctuation">.</span>op<span class="token operator">=</span>op<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span>mul_pearl<span class="token punctuation">[</span>mul_cnt<span class="token punctuation">]</span><span class="token punctuation">.</span>num<span class="token operator">=</span>num<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">if</span><span class="token punctuation">(</span>flag<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>ans<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span><span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>i<span class="token operator">&lt;=</span>add_cnt<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>ans<span class="token operator">+=</span>add_pearl<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>num<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>i<span class="token operator">&lt;=</span>mul_cnt<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>ans<span class="token operator">*=</span>mul_pearl<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>num<span class="token punctuation">;</span>ans<span class="token operator">%=</span><span class="token number">998244353</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">if</span><span class="token punctuation">(</span>ans<span class="token operator">&lt;</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>ans<span class="token operator">=</span><span class="token punctuation">(</span>ans<span class="token operator">+</span><span class="token number">998244353</span><span class="token punctuation">)</span><span class="token operator">%</span><span class="token number">998244353</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%lld\n"</span><span class="token punctuation">,</span>ans<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">else</span><span class="token punctuation">&#123;</span><span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>i<span class="token operator">&lt;=</span>add_cnt<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>pearl<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>op<span class="token operator">=</span>add_pearl<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>op<span class="token punctuation">;</span>pearl<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>num<span class="token operator">=</span>add_pearl<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>num<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>i<span class="token operator">&lt;=</span>mul_cnt<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>pearl<span class="token punctuation">[</span>i<span class="token operator">+</span>add_cnt<span class="token punctuation">]</span><span class="token punctuation">.</span>op<span class="token operator">=</span>mul_pearl<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>op<span class="token punctuation">;</span>pearl<span class="token punctuation">[</span>i<span class="token operator">+</span>add_cnt<span class="token punctuation">]</span><span class="token punctuation">.</span>num<span class="token operator">=</span>mul_pearl<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>num<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token function">dfs</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%lld\n"</span><span class="token punctuation">,</span>ans<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="四、C：天体探测仪（Astral-Detector）"><a href="#四、C：天体探测仪（Astral-Detector）" class="headerlink" title="四、C：天体探测仪（Astral Detector）"></a>四、C：天体探测仪（Astral Detector）</h3><p>本题我也只能用暴力算法了。</p><p>代码：<br><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;cstdio></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;cstring></span></span><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span><span class="token keyword">int</span> n<span class="token punctuation">;</span><span class="token keyword">int</span> input<span class="token punctuation">[</span><span class="token number">805</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">805</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">bool</span> visit<span class="token punctuation">[</span><span class="token number">805</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">int</span> dfs_array<span class="token punctuation">[</span><span class="token number">805</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">bool</span> answer_flag<span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token function">get_min</span><span class="token punctuation">(</span><span class="token keyword">int</span> index<span class="token punctuation">,</span><span class="token keyword">int</span> length<span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">register</span> <span class="token keyword">int</span> minn<span class="token operator">=</span>input<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>dfs_array<span class="token punctuation">[</span>index<span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">register</span> <span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">2</span><span class="token punctuation">;</span>i<span class="token operator">&lt;=</span>length<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">if</span><span class="token punctuation">(</span>minn<span class="token operator">></span>input<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>dfs_array<span class="token punctuation">[</span>i<span class="token operator">+</span>index<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>minn<span class="token operator">=</span>input<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>dfs_array<span class="token punctuation">[</span>i<span class="token operator">+</span>index<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">return</span> minn<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">void</span> <span class="token function">dfs</span><span class="token punctuation">(</span><span class="token keyword">int</span> x<span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">if</span><span class="token punctuation">(</span>answer_flag<span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">return</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">if</span><span class="token punctuation">(</span>x<span class="token operator">></span>n<span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">register</span> <span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">2</span><span class="token punctuation">;</span>i<span class="token operator">&lt;=</span>n<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">bool</span> appear<span class="token punctuation">[</span>n<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token function">memset</span><span class="token punctuation">(</span>appear<span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span>appear<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">register</span> <span class="token keyword">int</span> j<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>j<span class="token operator">&lt;=</span>n<span class="token operator">-</span>i<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">;</span>j<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">int</span> minn<span class="token operator">=</span><span class="token function">get_min</span><span class="token punctuation">(</span>j<span class="token punctuation">,</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">bool</span> flag<span class="token operator">=</span><span class="token boolean">false</span><span class="token punctuation">;</span><span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">register</span> <span class="token keyword">int</span> k<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>k<span class="token operator">&lt;=</span>n<span class="token operator">-</span>i<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">;</span>k<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">if</span><span class="token punctuation">(</span>input<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token operator">==</span>minn<span class="token operator">&amp;&amp;</span><span class="token operator">!</span>appear<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>appear<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token operator">=</span><span class="token boolean">true</span><span class="token punctuation">;</span>flag<span class="token operator">=</span><span class="token boolean">true</span><span class="token punctuation">;</span><span class="token keyword">break</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span>flag<span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">return</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">register</span> <span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>i<span class="token operator">&lt;=</span>n<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%d "</span><span class="token punctuation">,</span>input<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>dfs_array<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>answer_flag<span class="token operator">=</span><span class="token boolean">true</span><span class="token punctuation">;</span><span class="token keyword">return</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">//printf("Test\n");</span><span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">register</span> <span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>i<span class="token operator">&lt;=</span>n<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">if</span><span class="token punctuation">(</span>answer_flag<span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">return</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span>visit<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>visit<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">=</span><span class="token boolean">true</span><span class="token punctuation">;</span>dfs_array<span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token operator">=</span>i<span class="token punctuation">;</span><span class="token function">dfs</span><span class="token punctuation">(</span>x<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>visit<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">=</span><span class="token boolean">false</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span> <span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%d"</span><span class="token punctuation">,</span><span class="token operator">&amp;</span>n<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">register</span> <span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>i<span class="token operator">&lt;=</span>n<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">register</span> <span class="token keyword">int</span> j<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>j<span class="token operator">&lt;=</span>n<span class="token operator">-</span>i<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">;</span>j<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%d"</span><span class="token punctuation">,</span><span class="token operator">&amp;</span>input<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token function">dfs</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></p><h3 id="五、总分"><a href="#五、总分" class="headerlink" title="五、总分"></a>五、总分</h3><p>本场比赛，我一共获得了 $174$ 分，排名第 $370$ 名。</p><p><a href="https://imgtu.com/i/WBqNVK"><img src="https://z3.ax1x.com/2021/07/22/WBqNVK.png" alt="WBqNVK.png"></a></p>]]></content>
      
      
      <categories>
          
          <category> 比赛总结 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>七年级下学期期末考试总结</title>
      <link href="/2021-07-09-Grade7Term2FinalExamSummary/"/>
      <url>/2021-07-09-Grade7Term2FinalExamSummary/</url>
      
        <content type="html"><![CDATA[<h3 id="一、前言"><a href="#一、前言" class="headerlink" title="一、前言"></a>一、前言</h3><p>$2021$ 年 $7$ 月 $1$ 日至 $2$ 日，我校举行了期末考试。</p><p>试卷由增城区统一批改，直到目前也没有发下来。</p><h3 id="二、语文"><a href="#二、语文" class="headerlink" title="二、语文"></a>二、语文</h3><p>本次语文考得不是很理想，$102$ 分，满分 $120+8$（名著阅读附加）分。</p><h3 id="三、数学"><a href="#三、数学" class="headerlink" title="三、数学"></a>三、数学</h3><p>考试之前……</p><p>$zpy$：我昨天晚上都没复习，去喂狗了。</p><p>我：我也是，在看《伟大征程》直播。</p><p>开始考试，我只能感叹：数学出题老师真的是丧心病狂。</p><p>第 $16$ 题，考试之前，我已经预感到肯定会出折长方形纸条然后询问角度的问题。但没想到，这次是折 $2$ 次。</p><p>我距离正确答案只有一步之遥了！结果，写错了作答，扣 $3$ 分。</p><p>还没时间检查。</p><p>第 $24$ 题第（$3$）小题，大部分人都没看到要分类讨论，还好我看到了。</p><p>然而，第 $25$ 题第（$3$）小题，好难啊，我都没想出来怎么做，考试快结束时匆匆写了些推导出来但没用的解题过程，和用量角器看出来的结果（倒是对了）。</p><p>于是我获得了 $114/120$ 分。</p><h3 id="四、英语"><a href="#四、英语" class="headerlink" title="四、英语"></a>四、英语</h3><p>因为疫情原因，今年的英语期末考试取消了听说部分，这 $30$ 分在笔试部分中补。</p><p>我获得了 $114/120$ 分。</p><h3 id="五、道德与法治"><a href="#五、道德与法治" class="headerlink" title="五、道德与法治"></a>五、道德与法治</h3><p>道德与法治 $72/90$ 分。</p><p>考前，老师说，只要符合下面 $2$ 个条件中的任意一个，就可以免作业。</p><p>达到 $75$ 分。</p><p>相对于期中考试进步 $10$ 分或以上。</p><p>第2条我是肯定不可能符合的。原因在<a href="https://www.bilibili.com/read/cv12079421">我的这篇往期文章</a>去找。</p><p>结果第 $1$ 条也没有符合，于是又多了许多暑假作业，只能说是欲哭无泪。</p><h3 id="六、历史"><a href="#六、历史" class="headerlink" title="六、历史"></a>六、历史</h3><p>历史的免作业分数线是分，即 $86$ 分。然而我只拿了 $79$ 分。</p><p>历史暑假作业只有一个：抄下个学期的知识点，足足 $13$ 页。</p><h3 id="七、生物"><a href="#七、生物" class="headerlink" title="七、生物"></a>七、生物</h3><p>生物 $97/100$ 分，还算可以。</p><h3 id="八、地理"><a href="#八、地理" class="headerlink" title="八、地理"></a>八、地理</h3><p>地理试卷直接骂死日本。</p><p>第 $8$ 至 $10$ 题前置材料：$2011$ 年 $3$ 月 $11$ 日，日本福岛发生地震，福岛核电站核污水泄漏。$2021$ 年 $4$ 月 $13$ 日，日本内阁决定将福岛核电站的核污水排入大海。</p><p>第 $8$ 题：日本多发地震，是因为日本处在哪个地震带上？</p><p>第 $9$ 题：日本排放核污水，导致的后果不包括什么？</p><p>第 $10$ 题：日本应该如何正确处理此事？</p><p>总结一下：第 $8$ 题告诉我们为何会有核污水排海这件事，第 $9$ 题说明日本为什么不能把核污水排入大海，第 $10$ 题说明日本应如何做。</p><p>地理 $86/100$ 分，有些退步。</p><h3 id="九、体育"><a href="#九、体育" class="headerlink" title="九、体育"></a>九、体育</h3><p>体育 $54.6/70$ 分，对我来说还算可以。</p><h3 id="十、总分与排名"><a href="#十、总分与排名" class="headerlink" title="十、总分与排名"></a>十、总分与排名</h3><p>总分 $536.1/610$ 分（如果你的计算与我有差别，请参见<a href="https://www.bilibili.com/read/cv12079421">我的这篇往期文章</a>）。</p><p>班级排名：$1$（连续 $8$ 次大考都是班级第一）。</p><p>年级排名：$2$（我已经习惯了）。</p><p>考得还行，但不是很理想。</p>]]></content>
      
      
      <categories>
          
          <category> 学校生活 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>七年级下学期期中考试总结</title>
      <link href="/2021-07-09-Grade7Term2MidtermExamSummary/"/>
      <url>/2021-07-09-Grade7Term2MidtermExamSummary/</url>
      
        <content type="html"><![CDATA[<h3 id="一、前言"><a href="#一、前言" class="headerlink" title="一、前言"></a>一、前言</h3><p>$2021$ 年 $4$ 月 $26$ 日至 $28$ 日，我校举行了期中考试。</p><h3 id="二、语文"><a href="#二、语文" class="headerlink" title="二、语文"></a>二、语文</h3><p>语文还算可以，获得了 $116$ 分，满分 $120$ 分。事实上此试卷的满分是 $120$ 分+ $8$ 分（名著阅读附加分，这部分我全拿）。</p><p>选择题 $33$ 分全拿，作文 $50$ 分拿了 $41$ 分。</p><h3 id="三、数学"><a href="#三、数学" class="headerlink" title="三、数学"></a>三、数学</h3><p>考试前，$zpy$ 和 $czx$ 围在我旁边请教数学问题。这时我也在复习自己一道没太大把握的题（事后证明不考），而 $czx$ 强制占用带宽：不用复习了，反正你数学这么好，讲讲这道题。</p><p>考试结束后，我：话说你们为什么平时不来问，今天一窝蜂围上来？</p><p>$zpy$：要不是没有辅导老师，谁会问你。</p><p>数学挺难的，好在我向来擅长数学，获得了 $119$ 分，满分 $120$ 分。</p><p>$zpy$：这个五一假期我都要笼罩在数学的阴影中，$5$ 天有 $2$ 天要上补习班。</p><h3 id="四、英语"><a href="#四、英语" class="headerlink" title="四、英语"></a>四、英语</h3><p>英语我也比较擅长，获得了 $88$ 分，满分 $90$ 分（期中考试没有听说部分）。</p><h3 id="五、道德与法治"><a href="#五、道德与法治" class="headerlink" title="五、道德与法治"></a>五、道德与法治</h3><p>道德与法治堪称最难科目，其难度在我们全年级都是有名的，我也只获得了 $83$ 分（满分 $90$ 分）。这也是我们班同学最讨厌的科目，几乎全班同学问道法色变。而我，则是全年级的一股清流，虽不十分喜欢，但也不十分讨厌。</p><h3 id="六、历史"><a href="#六、历史" class="headerlink" title="六、历史"></a>六、历史</h3><p>历史就有点惨了，$82/90$ 分。还踩中了一个大坑。</p><p>问：唐朝兴盛带给我们的启示？</p><p>我在作答里写了“统治者要……”“官吏不能腐败”，“统治者”和“官吏”不符合当前时政，整道题 $0$ 分（共 $4$ 分）。</p><h3 id="七、地理"><a href="#七、地理" class="headerlink" title="七、地理"></a>七、地理</h3><p>地理 $93$ 分，满分 $100$ 分。</p><h3 id="八、生物"><a href="#八、生物" class="headerlink" title="八、生物"></a>八、生物</h3><p>生物考得非常好，$100$ 分的总分全拿。</p><h3 id="九、总分与排名"><a href="#九、总分与排名" class="headerlink" title="九、总分与排名"></a>九、总分与排名</h3><p>总分与排名仅计算前五科，因为后两科在中考中都仅仅是排 $ABCDE$ 级。</p><p>总分：$488/510$ 分</p><p>班级排名：$1$</p><p>年级排名：$2$</p><p>还算可以~</p><h3 id="十、后记"><a href="#十、后记" class="headerlink" title="十、后记"></a>十、后记</h3><p>下次第二次月考加油！</p>]]></content>
      
      
      <categories>
          
          <category> 学校生活 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>如何使用luogu-card</title>
      <link href="/2021-07-07-HowToUseLuoguCard/"/>
      <url>/2021-07-07-HowToUseLuoguCard/</url>
      
        <content type="html"><![CDATA[<blockquote><p>该项目是由<a href="https://github.com/wao3/luogu-stats-card">wao3/luogu-stats-card</a>复制过来并加以二次开发的的，感谢TA的贡献。</p><p>注意：为了不滥用洛谷服务器流量，本项目利用 vercel 的边缘缓存功能缓存了 12 小时数据，即同一个用户卡片 <strong>24 小时内最多只会向洛谷服务器请求 2 次数据</strong>，并且只有在用户访问卡片时才会请求数据。不过，可以禁用缓存。</p></blockquote><h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h2><p><code>luogu-card</code>是一个动态生成洛谷用户数据卡片的工具，可以展示自己的做题情况。可以用于个人主页、博客、github等可以插入图片的地方。</p><p>您可以访问：<a href="https://github.com/cyrxdzj/luogu-card/blob/master/README.md">Github源仓库</a>或<a href="https://gitee.com/cyrxdzj/luogu-card">Gitee镜像仓库</a></p><h2 id="如何使用"><a href="#如何使用" class="headerlink" title="如何使用"></a>如何使用</h2><h3 id="基本信息"><a href="#基本信息" class="headerlink" title="基本信息"></a>基本信息</h3><p><img src="https://luogu-card.cyrxdzj.eu.org/about?id=387836" alt="dengzijun的基本信息"></p><p>此卡片用于显示一个用户的基本信息，包括用户类型、关注、咕值排名、个性签名。</p><p>具体使用方法如下：</p><ol><li><p>仅使用图片：直接复制以下内容到任意 markdown 编辑器中，并将<code>?id=</code>后面的数字更改为自己的 id 即可（id是洛谷的用户编号）。</p><pre class="line-numbers language-markdown" data-language="markdown"><code class="language-markdown"><span class="token url"><span class="token operator">!</span>[<span class="token content">dengzijun的基本信息</span>](<span class="token url">https://luogu-card.cyrxdzj.eu.org/about?id=387836</span>)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p>使用图片链接：复制以下内容，第二个小括号内的地址是点击该图片跳转的地址，建议设置为洛谷个人主页。</p><pre class="line-numbers language-markdown" data-language="markdown"><code class="language-markdown"><span class="token url">[<span class="token content">![dengzijun的基本信息</span>](<span class="token url">https://luogu-card.cyrxdzj.eu.org/about?id=387836</span>)</span>](https://github.com/cyrxdzj/luogu-card)<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li></ol><h3 id="练习情况"><a href="#练习情况" class="headerlink" title="练习情况"></a>练习情况</h3><p><img src="https://luogu-card.cyrxdzj.eu.org/practice?id=387836" alt="dengzijun的练习情况"></p><p>练习情况可以自动获取用户的数据，但是前提是没有开启“完全隐私保护”。</p><p>具体使用方法如下：</p><ol><li><p>仅使用图片：直接复制以下内容到任意 markdown 编辑器中，并将<code>?id=</code>后面的数字更改为自己的 id 即可（id是洛谷的用户编号）。</p><pre class="line-numbers language-markdown" data-language="markdown"><code class="language-markdown"><span class="token url"><span class="token operator">!</span>[<span class="token content">dengzijun的练习情况</span>](<span class="token url">https://luogu-card.cyrxdzj.eu.org/practice?id=387836</span>)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p>使用图片链接：复制以下内容，第二个小括号内的地址是点击该图片跳转的地址，建议设置为洛谷个人主页。</p><pre class="line-numbers language-markdown" data-language="markdown"><code class="language-markdown"><span class="token url">[<span class="token content">![dengzijun的练习情况</span>](<span class="token url">https://luogu-card.cyrxdzj.eu.org/practice?id=387836</span>)</span>](https://github.com/cyrxdzj/luogu-card)<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li></ol><h3 id="咕值信息"><a href="#咕值信息" class="headerlink" title="咕值信息"></a>咕值信息</h3><p><img src="https://luogu-card.cyrxdzj.eu.org/guzhi?id=387836" alt="dengzijun的咕值信息"></p><p>咕值信息一般无法自动获取数据，如果需要必须要提供cookie，但是这种方法十分不安全，并且不方便。所以获取咕值卡片可能需要手动输入咕值信息，具体使用方法如下：</p><p>复制以下内容到任意 markdown 编辑器中，并将 <code>?id=</code>后面的数字更改为自己的 id，将<code>scores=</code>后面更换为自己的咕值信息，一共 5 个数字，用逗号分隔。</p><ol><li><p>仅使用图片：复制以下内容到任意 markdown 编辑器中，并将 <code>?id=</code>后面的数字更改为自己的 id，将<code>scores=</code>后面更换为自己的咕值信息，一共 5 个数字（分别代表基础信用、练习情况、社区贡献、比赛情况、获得成就），用英文半角逗号分隔。</p><pre class="line-numbers language-markdown" data-language="markdown"><code class="language-markdown"><span class="token url"><span class="token operator">!</span>[<span class="token content">dengzijun的咕值信息</span>](<span class="token url">http://luogu-card.vercel.app/guzhi?id=387836&amp;scores=100,70,25,45,0</span>)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p>使用图片链接：复制以下内容，第二个小括号内的地址是点击该图片跳转的地址，建议设置为洛谷个人主页。</p><pre class="line-numbers language-markdown" data-language="markdown"><code class="language-markdown"><span class="token url">[<span class="token content">![dengzijun的咕值信息</span>](<span class="token url">http://luogu-card.vercel.app/guzhi?id=387836&amp;scores=100,70,25,45,0</span>)</span>](https://github.com/cyrxdzj/luogu-card)<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li></ol><p>注意，若程序检测到咕值排名在1000名以内，则程序会自动从“咕值排名”中获取咕值。若获取成功，程序将无视用户输入。不过此功能偶尔会出BUG，所以最好还是手动设置一下咕值吧。</p><p>另外，使用<code>update_time</code>参数可以自己指定咕值卡片上的更新时间，格式是一个正整数，代表你想指定的时间的伦敦格林尼治时间距离1970年1月1日00:00的毫秒数。提示：在JavaScript语言中，<code>new Date().getTime()</code>可以获取这个值。但是，只有在程序无法从“咕值排名”中获取咕值时才会采信这个输入。</p><h3 id="自定义选项"><a href="#自定义选项" class="headerlink" title="自定义选项"></a>自定义选项</h3><p>使用卡片时，支持设定自定义效果选项，可以组合使用。</p><ol><li><p><strong>隐藏标题</strong>，只需在链接最后带上<code>&amp;hide_title=true</code>即可，例如：</p><pre class="line-numbers language-markdown" data-language="markdown"><code class="language-markdown"><span class="token url"><span class="token operator">!</span>[<span class="token content">dengzijun的练习情况</span>](<span class="token url">https://luogu-card.cyrxdzj.eu.org/practice?id=387836&amp;hide_title=true</span>)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>效果：</p><p><img src="https://luogu-card.cyrxdzj.eu.org/practice?id=387836&amp;hide_title=1" alt="dengzijun的练习情况"></p></li><li><p><strong>黑暗模式</strong>，只需在链接最后带上<code>&amp;dark_mode=true</code>即可，例如：</p><pre class="line-numbers language-markdown" data-language="markdown"><code class="language-markdown"><span class="token url"><span class="token operator">!</span>[<span class="token content">dengzijun的练习情况</span>](<span class="token url">https://luogu-card.cyrxdzj.eu.org/practice?id=387836&amp;dark_mode=true</span>)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>效果：</p><p><img src="https://luogu-card.cyrxdzj.eu.org/practice?id=387836&amp;dark_mode=true" alt="dengzijun的练习情况"></p></li><li><p><strong>自定义宽度</strong>，默认500，限制宽度在500到1920之间，只需在链接最后带上<code>&amp;card_width=需要的宽度</code>即可，例如：</p><pre class="line-numbers language-markdown" data-language="markdown"><code class="language-markdown"><span class="token url"><span class="token operator">!</span>[<span class="token content">dengzijun的练习情况</span>](<span class="token url">https://luogu-card.cyrxdzj.eu.org/practice?id=387836&amp;card_width=750</span>)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>效果：</p><p><img src="https://luogu-card.cyrxdzj.eu.org/practice?id=387836&amp;card_width=750" alt="dengzijun的练习情况"></p></li><li><p><strong>禁用缓存</strong>，默认情况下，程序会有12小时的缓存。但是只需在链接最后带上<code>&amp;disable_cache=true</code>即可禁用缓存，每次访问都将刷新。</p></li></ol><h2 id="自行部署"><a href="#自行部署" class="headerlink" title="自行部署"></a>自行部署</h2><p>如果想要自行试验或者二次开发可以自行部署到自己的 vercel 服务器，登录 <a href="https://vercel.com/">vercel</a> 后，点击下方按钮即可部署。</p><p><a href="https://vercel.com/import/project?template=https://github.com/cyrxdzj/luogu-card"><img src="https://vercel.com/button" alt="Deploy to Vercel"></a></p><h2 id="如何参与贡献"><a href="#如何参与贡献" class="headerlink" title="如何参与贡献"></a>如何参与贡献</h2><h4 id="提供bug反馈或建议"><a href="#提供bug反馈或建议" class="headerlink" title="提供bug反馈或建议"></a>提供bug反馈或建议</h4><p>使用 <a href="https://github.com/cyrxdzj/luogu-card/issues">issue</a> 反馈bug时，尽可能详细描述 bug 及其复现步骤</p><h4 id="贡献代码的步骤"><a href="#贡献代码的步骤" class="headerlink" title="贡献代码的步骤"></a>贡献代码的步骤</h4><ol><li>fork项目到自己的repo</li><li>把fork过去的项目也就是你的项目clone到你的本地</li><li>修改代码</li><li>commit后push到自己的库</li><li>在Github首页可以看到一个 pull request 按钮，点击它，填写一些说明信息，然后提交即可。</li><li>等待作者合并</li></ol><h2 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h2><p>如果对你有所帮助的话，希望能在右上角点一个 star (★ ω ★)</p><h2 id="镜像仓库"><a href="#镜像仓库" class="headerlink" title="镜像仓库"></a>镜像仓库</h2><p><del>要不是vercel不支持Gitee只支持Github，我也不会出现在这里了</del></p><p>本仓库在码云Gitee上创建了一个<a href="https://gitee.com/cyrxdzj/luogu-card">镜像仓库</a>，但会有同步延迟。也可以访问位于Github的<a href="https://github.com/cyrxdzj/luogu-card">源仓库</a>。</p><p><a href="https://gitee.com/cyrxdzj/luogu-card/stargazers"><img src="https://gitee.com/cyrxdzj/luogu-card/badge/star.svg?theme=dark" alt="star"></a></p><p><a href="https://gitee.com/cyrxdzj/luogu-card"><img src="https://gitee.com/cyrxdzj/luogu-card/widgets/widget_card.svg?colors=eae9d7,2e2f29,272822,484a45,eae9d7,747571" alt="cyrxdzj/luogu-card"></a></p>]]></content>
      
      
      <categories>
          
          <category> 一些杂七杂八的东西 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>洛谷2021年05月月赛参加总结</title>
      <link href="/2021-07-02-LuoguMonthlyCompetition202105Summary/"/>
      <url>/2021-07-02-LuoguMonthlyCompetition202105Summary/</url>
      
        <content type="html"><![CDATA[<h3 id="一、前言"><a href="#一、前言" class="headerlink" title="一、前言"></a>一、前言</h3><p>洛谷每个月都会举办月赛，这次我参加的是 $Div.2$（实力不允许）。</p><p>以下只讲我会做的题目。</p><h3 id="二、A：「MCOI-05」饱食"><a href="#二、A：「MCOI-05」饱食" class="headerlink" title="二、A：「MCOI-05」饱食"></a>二、A：「MCOI-05」饱食</h3><p>传送门：<a href="https://www.luogu.com.cn/problem/P7566?contestId=30514">https://www.luogu.com.cn/problem/P7566?contestId=30514</a></p><p>对于这道题，我估计大家一定会先想到 $DFS$ 死算。其实这完全没有必要，可以统计每只兔子的名字的首字母的出现次数，然后关注“M”“C”“O”“I”四个字母的出现次数。</p><p>$AC$ 代码：</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;cstdio></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;cstring></span></span><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span><span class="token keyword">int</span> n<span class="token punctuation">;</span><span class="token keyword">long</span> <span class="token keyword">long</span> rabbit_capital<span class="token punctuation">[</span><span class="token number">26</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%d"</span><span class="token punctuation">,</span><span class="token operator">&amp;</span>n<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>i<span class="token operator">&lt;=</span>n<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">char</span> temp<span class="token punctuation">[</span><span class="token number">12</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%s"</span><span class="token punctuation">,</span><span class="token operator">&amp;</span>temp<span class="token punctuation">)</span><span class="token punctuation">;</span>rabbit_capital<span class="token punctuation">[</span>temp<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token operator">-</span><span class="token char">'A'</span><span class="token punctuation">]</span><span class="token operator">++</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%lld\n"</span><span class="token punctuation">,</span>rabbit_capital<span class="token punctuation">[</span><span class="token char">'M'</span><span class="token operator">-</span><span class="token char">'A'</span><span class="token punctuation">]</span><span class="token operator">*</span>rabbit_capital<span class="token punctuation">[</span><span class="token char">'C'</span><span class="token operator">-</span><span class="token char">'A'</span><span class="token punctuation">]</span><span class="token operator">*</span>rabbit_capital<span class="token punctuation">[</span><span class="token char">'O'</span><span class="token operator">-</span><span class="token char">'A'</span><span class="token punctuation">]</span><span class="token operator">+</span>rabbit_capital<span class="token punctuation">[</span><span class="token char">'I'</span><span class="token operator">-</span><span class="token char">'A'</span><span class="token punctuation">]</span><span class="token operator">*</span>rabbit_capital<span class="token punctuation">[</span><span class="token char">'C'</span><span class="token operator">-</span><span class="token char">'A'</span><span class="token punctuation">]</span><span class="token operator">*</span>rabbit_capital<span class="token punctuation">[</span><span class="token char">'O'</span><span class="token operator">-</span><span class="token char">'A'</span><span class="token punctuation">]</span><span class="token operator">+</span>rabbit_capital<span class="token punctuation">[</span><span class="token char">'M'</span><span class="token operator">-</span><span class="token char">'A'</span><span class="token punctuation">]</span><span class="token operator">*</span>rabbit_capital<span class="token punctuation">[</span><span class="token char">'C'</span><span class="token operator">-</span><span class="token char">'A'</span><span class="token punctuation">]</span><span class="token operator">*</span>rabbit_capital<span class="token punctuation">[</span><span class="token char">'I'</span><span class="token operator">-</span><span class="token char">'A'</span><span class="token punctuation">]</span><span class="token operator">+</span>rabbit_capital<span class="token punctuation">[</span><span class="token char">'M'</span><span class="token operator">-</span><span class="token char">'A'</span><span class="token punctuation">]</span><span class="token operator">*</span>rabbit_capital<span class="token punctuation">[</span><span class="token char">'I'</span><span class="token operator">-</span><span class="token char">'A'</span><span class="token punctuation">]</span><span class="token operator">*</span>rabbit_capital<span class="token punctuation">[</span><span class="token char">'O'</span><span class="token operator">-</span><span class="token char">'A'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>记录：<a href="https://www.luogu.com.cn/record/50155330">https://www.luogu.com.cn/record/50155330</a>。</p><p>注意开 <code>long long</code>！正如一句话所言，十年 OI 一场空，不开 <code>long long</code> 见祖宗。</p><h3 id="三、B：「MCOI-05」魔仙"><a href="#三、B：「MCOI-05」魔仙" class="headerlink" title="三、B：「MCOI-05」魔仙"></a>三、B：「MCOI-05」魔仙</h3><p>传送门：<a href="https://www.luogu.com.cn/problem/P7567?contestId=30514">https://www.luogu.com.cn/problem/P7567?contestId=30514</a></p><p>这道题其实是有规律的。</p><p>首先，若这个数不能被4整除，必无解。</p><p>若这个数能被4整除，必有解。至于规律，见代码。</p><p>$AC$ 代码：</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;cstdio></span></span><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span><span class="token keyword">int</span> n<span class="token punctuation">,</span>t<span class="token punctuation">;</span><span class="token keyword">int</span> magic<span class="token punctuation">[</span><span class="token number">1000005</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token comment">//cin>>t;</span><span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%d"</span><span class="token punctuation">,</span><span class="token operator">&amp;</span>t<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> time<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>time<span class="token operator">&lt;</span>t<span class="token punctuation">;</span>time<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token comment">//cin>>n;</span><span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%d"</span><span class="token punctuation">,</span><span class="token operator">&amp;</span>n<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">if</span><span class="token punctuation">(</span>n<span class="token operator">%</span><span class="token number">4</span><span class="token operator">!=</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"w33zAKIOI\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">continue</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span>n<span class="token operator">%</span><span class="token number">8</span><span class="token operator">==</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"2 %d"</span><span class="token punctuation">,</span>n<span class="token operator">/</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">int</span> prt_cnt<span class="token operator">=</span><span class="token number">2</span><span class="token punctuation">;</span><span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>i<span class="token operator">&lt;=</span><span class="token number">2</span><span class="token operator">+</span>n<span class="token operator">/</span><span class="token number">2</span><span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">" -1"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>prt_cnt<span class="token operator">++</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>i<span class="token operator">&lt;=</span>n<span class="token operator">-</span>prt_cnt<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">" %d"</span><span class="token punctuation">,</span><span class="token punctuation">(</span><span class="token punctuation">(</span>i<span class="token operator">%</span><span class="token number">2</span><span class="token operator">==</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token operator">?</span><span class="token operator">-</span><span class="token number">1</span><span class="token operator">:</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">else</span><span class="token punctuation">&#123;</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"-2 %d"</span><span class="token punctuation">,</span>n<span class="token operator">/</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">int</span> prt_cnt<span class="token operator">=</span><span class="token number">2</span><span class="token punctuation">;</span><span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>i<span class="token operator">&lt;=</span>n<span class="token operator">/</span><span class="token number">2</span><span class="token operator">-</span><span class="token number">2</span><span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">" -1"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>prt_cnt<span class="token operator">++</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>i<span class="token operator">&lt;=</span>n<span class="token operator">-</span>prt_cnt<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">" %d"</span><span class="token punctuation">,</span><span class="token punctuation">(</span><span class="token punctuation">(</span>i<span class="token operator">%</span><span class="token number">2</span><span class="token operator">==</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token operator">?</span><span class="token operator">-</span><span class="token number">1</span><span class="token operator">:</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>记录：<a href="https://www.luogu.com.cn/record/50155828">https://www.luogu.com.cn/record/50155828</a>。</p><h3 id="四、总分"><a href="#四、总分" class="headerlink" title="四、总分"></a>四、总分</h3><p>这场比赛我共获得 $215$ 分（$D$ 题骗了 $15$ 分），第 $110$ 名。</p><p><img src="https://z3.ax1x.com/2021/07/02/Rcd4sO.png" alt=""></p><h3 id="五、花絮"><a href="#五、花絮" class="headerlink" title="五、花絮"></a>五、花絮</h3><p>前面说过，我在 $D$ 题骗了 $15$ 分，而我手欠也报了 $Div.1$，惊讶地发现 $Div.2$ 的后两题就是 $Div.1$ 的前两题。</p><p>于是，我把 $Div.2$ 的 $D$ 题骗分代码照搬到 $Div.1$ 的 $B$ 题，也成功地拿到了 $15$ 分。</p><p><img src="https://z3.ax1x.com/2021/07/02/RcwFWq.png" alt=""></p><p>$Div.2$ 的 $D$ 题的骗分代码：</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;cstdio></span></span><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span><span class="token keyword">int</span> n<span class="token punctuation">,</span>m<span class="token punctuation">,</span>k<span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%d%d%d"</span><span class="token punctuation">,</span><span class="token operator">&amp;</span>n<span class="token punctuation">,</span><span class="token operator">&amp;</span>m<span class="token punctuation">,</span><span class="token operator">&amp;</span>k<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">if</span><span class="token punctuation">(</span>n<span class="token operator">==</span><span class="token number">1</span><span class="token operator">&amp;&amp;</span>m<span class="token operator">==</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"YES\n\n1 1\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token punctuation">(</span>n<span class="token operator">==</span><span class="token number">3</span><span class="token operator">&amp;&amp;</span>m<span class="token operator">==</span><span class="token number">3</span><span class="token operator">&amp;&amp;</span>k<span class="token operator">==</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token operator">||</span>k<span class="token operator">==</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"NO\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span>n<span class="token operator">==</span><span class="token number">6</span><span class="token operator">&amp;&amp;</span>m<span class="token operator">==</span><span class="token number">4</span><span class="token operator">&amp;&amp;</span>k<span class="token operator">==</span><span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"YES\nRRRDLLLDRRRDLLLDRRRDLLL\n1 1\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span>k<span class="token operator">==</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"NO\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">if</span><span class="token punctuation">(</span>k<span class="token operator">></span>m<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">if</span><span class="token punctuation">(</span>m<span class="token operator">-</span><span class="token number">1</span><span class="token operator">==</span><span class="token number">0</span><span class="token operator">&amp;&amp;</span>k<span class="token operator">&lt;=</span>n<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"NO\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"YES\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">if</span><span class="token punctuation">(</span>n<span class="token operator">%</span><span class="token number">2</span><span class="token operator">==</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>i<span class="token operator">&lt;=</span>n<span class="token operator">/</span><span class="token number">2</span><span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> j<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>j<span class="token operator">&lt;</span>m<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>j<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"R"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"D"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> j<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>j<span class="token operator">&lt;</span>m<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>j<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"L"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">if</span><span class="token punctuation">(</span>i<span class="token operator">!=</span>n<span class="token operator">/</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"D"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"\n1 1\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">else</span><span class="token punctuation">&#123;</span><span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>i<span class="token operator">&lt;=</span>n<span class="token operator">/</span><span class="token number">2</span><span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> j<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>j<span class="token operator">&lt;</span>m<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>j<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"R"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"D"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> j<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>j<span class="token operator">&lt;</span>m<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>j<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"L"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"D"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> j<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>j<span class="token operator">&lt;</span>m<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>j<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"R"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"\n1 1\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span>k<span class="token operator">></span>n<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">if</span><span class="token punctuation">(</span>n<span class="token operator">-</span><span class="token number">1</span><span class="token operator">==</span><span class="token number">0</span><span class="token operator">&amp;&amp;</span>k<span class="token operator">&lt;=</span>m<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"NO\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"YES\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">if</span><span class="token punctuation">(</span>m<span class="token operator">%</span><span class="token number">2</span><span class="token operator">==</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>i<span class="token operator">&lt;=</span>m<span class="token operator">/</span><span class="token number">2</span><span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> j<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>j<span class="token operator">&lt;</span>n<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>j<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"D"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"R"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> j<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>j<span class="token operator">&lt;</span>n<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>j<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"U"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">if</span><span class="token punctuation">(</span>i<span class="token operator">!=</span>m<span class="token operator">/</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"R"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"\n1 1\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">else</span><span class="token punctuation">&#123;</span><span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>i<span class="token operator">&lt;=</span>m<span class="token operator">/</span><span class="token number">2</span><span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> j<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>j<span class="token operator">&lt;</span>n<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>j<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"D"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"R"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> j<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>j<span class="token operator">&lt;</span>n<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>j<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"U"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"R"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> j<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>j<span class="token operator">&lt;</span>n<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>j<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"D"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"\n1 1\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><del>要不是题目开了 <code>Subtask</code>，我还能骗更多分。</del></p><h3 id="六、后记"><a href="#六、后记" class="headerlink" title="六、后记"></a>六、后记</h3><p>这次 $05$ 月月赛起码比上次 $04$ 月月赛的 $100/400$ 分好多了。</p><p><img src="https://z3.ax1x.com/2021/07/02/RcwZOU.png" alt=""></p>]]></content>
      
      
      <categories>
          
          <category> 比赛总结 </category>
          
      </categories>
      
      
    </entry>
    
    
  
  
</search>
